// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Screamer.Presistance.DatabaseContext;

#nullable disable

namespace Screamer.Presistance.Migrations
{
    [DbContext(typeof(ScreamerDbContext))]
    [Migration("20230603100806_InitialMigrationss2")]
    partial class InitialMigrationss2
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "cac43a6e-f7bb-4448-baaf-1add431ccbbf",
                            Name = "Moderator",
                            NormalizedName = "MODERATOR"
                        },
                        new
                        {
                            Id = "cbc43a8e-f7bb-4445-baaf-1add431ffbbf",
                            Name = "Administrator",
                            NormalizedName = "ADMINISTRATOR"
                        },
                        new
                        {
                            Id = "dbc43a8e-f7bb-4445-baaf-1999999999",
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "8e445865-a24d-4543-a6c6-9443d048cdb9",
                            RoleId = "cbc43a8e-f7bb-4445-baaf-1add431ffbbf"
                        },
                        new
                        {
                            UserId = "9e224968-33e4-4652-b7b7-8574d048cdb9",
                            RoleId = "cac43a6e-f7bb-4448-baaf-1add431ccbbf"
                        },
                        new
                        {
                            UserId = "9e224968-33e4-4652-b7b7-agfddsr",
                            RoleId = "dbc43a8e-f7bb-4445-baaf-1999999999"
                        },
                        new
                        {
                            UserId = "9e224968-33e4-4652-b7b7-ismailbentabett",
                            RoleId = "cbc43a8e-f7bb-4445-baaf-1add431ffbbf"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Screamer.Domain.Common.Avatar", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasAnnotation("Relational:JsonPropertyName", "createdAt");

                    b.Property<bool>("IsMain")
                        .HasColumnType("bit");

                    b.Property<string>("PublicId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasAnnotation("Relational:JsonPropertyName", "updatedAt");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Avatar");
                });

            modelBuilder.Entity("Screamer.Domain.Common.Post", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()")
                        .HasAnnotation("Relational:JsonPropertyName", "createdAt");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MoodId")
                        .HasColumnType("int");

                    b.Property<string>("ObjectID")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "objectID");

                    b.Property<string>("PostImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()")
                        .HasAnnotation("Relational:JsonPropertyName", "updatedAt");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Views")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MoodId");

                    b.HasIndex("UserId");

                    b.ToTable("Posts");
                });

            modelBuilder.Entity("Screamer.Domain.Entities.Adress", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasAnnotation("Relational:JsonPropertyName", "createdAt");

                    b.Property<string>("PostalCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("State")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Street")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasAnnotation("Relational:JsonPropertyName", "updatedAt");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasFilter("[UserId] IS NOT NULL");

                    b.ToTable("Adress");
                });

            modelBuilder.Entity("Screamer.Domain.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasAnnotation("Relational:JsonPropertyName", "createdAt");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasAnnotation("Relational:JsonPropertyName", "updatedAt");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2023, 6, 3, 11, 8, 6, 374, DateTimeKind.Local).AddTicks(2797),
                            Name = "News",
                            UpdatedAt = new DateTime(2023, 6, 3, 11, 8, 6, 374, DateTimeKind.Local).AddTicks(2818)
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2023, 6, 3, 11, 8, 6, 374, DateTimeKind.Local).AddTicks(2823),
                            Name = "Politics",
                            UpdatedAt = new DateTime(2023, 6, 3, 11, 8, 6, 374, DateTimeKind.Local).AddTicks(2824)
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2023, 6, 3, 11, 8, 6, 374, DateTimeKind.Local).AddTicks(2825),
                            Name = "Science",
                            UpdatedAt = new DateTime(2023, 6, 3, 11, 8, 6, 374, DateTimeKind.Local).AddTicks(2825)
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2023, 6, 3, 11, 8, 6, 374, DateTimeKind.Local).AddTicks(2827),
                            Name = "Technology",
                            UpdatedAt = new DateTime(2023, 6, 3, 11, 8, 6, 374, DateTimeKind.Local).AddTicks(2827)
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2023, 6, 3, 11, 8, 6, 374, DateTimeKind.Local).AddTicks(2828),
                            Name = "Gaming",
                            UpdatedAt = new DateTime(2023, 6, 3, 11, 8, 6, 374, DateTimeKind.Local).AddTicks(2828)
                        },
                        new
                        {
                            Id = 6,
                            CreatedAt = new DateTime(2023, 6, 3, 11, 8, 6, 374, DateTimeKind.Local).AddTicks(2865),
                            Name = "Sports",
                            UpdatedAt = new DateTime(2023, 6, 3, 11, 8, 6, 374, DateTimeKind.Local).AddTicks(2866)
                        },
                        new
                        {
                            Id = 7,
                            CreatedAt = new DateTime(2023, 6, 3, 11, 8, 6, 374, DateTimeKind.Local).AddTicks(2867),
                            Name = "Music",
                            UpdatedAt = new DateTime(2023, 6, 3, 11, 8, 6, 374, DateTimeKind.Local).AddTicks(2867)
                        },
                        new
                        {
                            Id = 8,
                            CreatedAt = new DateTime(2023, 6, 3, 11, 8, 6, 374, DateTimeKind.Local).AddTicks(2868),
                            Name = "Movies",
                            UpdatedAt = new DateTime(2023, 6, 3, 11, 8, 6, 374, DateTimeKind.Local).AddTicks(2868)
                        },
                        new
                        {
                            Id = 9,
                            CreatedAt = new DateTime(2023, 6, 3, 11, 8, 6, 374, DateTimeKind.Local).AddTicks(2869),
                            Name = "Television",
                            UpdatedAt = new DateTime(2023, 6, 3, 11, 8, 6, 374, DateTimeKind.Local).AddTicks(2869)
                        },
                        new
                        {
                            Id = 10,
                            CreatedAt = new DateTime(2023, 6, 3, 11, 8, 6, 374, DateTimeKind.Local).AddTicks(2872),
                            Name = "Books",
                            UpdatedAt = new DateTime(2023, 6, 3, 11, 8, 6, 374, DateTimeKind.Local).AddTicks(2872)
                        },
                        new
                        {
                            Id = 11,
                            CreatedAt = new DateTime(2023, 6, 3, 11, 8, 6, 374, DateTimeKind.Local).AddTicks(2873),
                            Name = "Art",
                            UpdatedAt = new DateTime(2023, 6, 3, 11, 8, 6, 374, DateTimeKind.Local).AddTicks(2873)
                        },
                        new
                        {
                            Id = 12,
                            CreatedAt = new DateTime(2023, 6, 3, 11, 8, 6, 374, DateTimeKind.Local).AddTicks(2874),
                            Name = "Food",
                            UpdatedAt = new DateTime(2023, 6, 3, 11, 8, 6, 374, DateTimeKind.Local).AddTicks(2875)
                        },
                        new
                        {
                            Id = 13,
                            CreatedAt = new DateTime(2023, 6, 3, 11, 8, 6, 374, DateTimeKind.Local).AddTicks(2875),
                            Name = "Travel",
                            UpdatedAt = new DateTime(2023, 6, 3, 11, 8, 6, 374, DateTimeKind.Local).AddTicks(2876)
                        },
                        new
                        {
                            Id = 14,
                            CreatedAt = new DateTime(2023, 6, 3, 11, 8, 6, 374, DateTimeKind.Local).AddTicks(2883),
                            Name = "Fitness",
                            UpdatedAt = new DateTime(2023, 6, 3, 11, 8, 6, 374, DateTimeKind.Local).AddTicks(2883)
                        },
                        new
                        {
                            Id = 15,
                            CreatedAt = new DateTime(2023, 6, 3, 11, 8, 6, 374, DateTimeKind.Local).AddTicks(2884),
                            Name = "Health",
                            UpdatedAt = new DateTime(2023, 6, 3, 11, 8, 6, 374, DateTimeKind.Local).AddTicks(2896)
                        },
                        new
                        {
                            Id = 16,
                            CreatedAt = new DateTime(2023, 6, 3, 11, 8, 6, 374, DateTimeKind.Local).AddTicks(2916),
                            Name = "Fashion",
                            UpdatedAt = new DateTime(2023, 6, 3, 11, 8, 6, 374, DateTimeKind.Local).AddTicks(2917)
                        },
                        new
                        {
                            Id = 17,
                            CreatedAt = new DateTime(2023, 6, 3, 11, 8, 6, 374, DateTimeKind.Local).AddTicks(2917),
                            Name = "Relationships",
                            UpdatedAt = new DateTime(2023, 6, 3, 11, 8, 6, 374, DateTimeKind.Local).AddTicks(2918)
                        },
                        new
                        {
                            Id = 18,
                            CreatedAt = new DateTime(2023, 6, 3, 11, 8, 6, 374, DateTimeKind.Local).AddTicks(2920),
                            Name = "Advice",
                            UpdatedAt = new DateTime(2023, 6, 3, 11, 8, 6, 374, DateTimeKind.Local).AddTicks(2920)
                        },
                        new
                        {
                            Id = 19,
                            CreatedAt = new DateTime(2023, 6, 3, 11, 8, 6, 374, DateTimeKind.Local).AddTicks(2921),
                            Name = "Writing",
                            UpdatedAt = new DateTime(2023, 6, 3, 11, 8, 6, 374, DateTimeKind.Local).AddTicks(2921)
                        },
                        new
                        {
                            Id = 20,
                            CreatedAt = new DateTime(2023, 6, 3, 11, 8, 6, 374, DateTimeKind.Local).AddTicks(2922),
                            Name = "Photography",
                            UpdatedAt = new DateTime(2023, 6, 3, 11, 8, 6, 374, DateTimeKind.Local).AddTicks(2922)
                        },
                        new
                        {
                            Id = 21,
                            CreatedAt = new DateTime(2023, 6, 3, 11, 8, 6, 374, DateTimeKind.Local).AddTicks(2923),
                            Name = "DIY (Do-It-Yourself)",
                            UpdatedAt = new DateTime(2023, 6, 3, 11, 8, 6, 374, DateTimeKind.Local).AddTicks(2923)
                        },
                        new
                        {
                            Id = 22,
                            CreatedAt = new DateTime(2023, 6, 3, 11, 8, 6, 374, DateTimeKind.Local).AddTicks(2924),
                            Name = "Nature",
                            UpdatedAt = new DateTime(2023, 6, 3, 11, 8, 6, 374, DateTimeKind.Local).AddTicks(2925)
                        },
                        new
                        {
                            Id = 23,
                            CreatedAt = new DateTime(2023, 6, 3, 11, 8, 6, 374, DateTimeKind.Local).AddTicks(2926),
                            Name = "Animals",
                            UpdatedAt = new DateTime(2023, 6, 3, 11, 8, 6, 374, DateTimeKind.Local).AddTicks(2926)
                        },
                        new
                        {
                            Id = 24,
                            CreatedAt = new DateTime(2023, 6, 3, 11, 8, 6, 374, DateTimeKind.Local).AddTicks(2927),
                            Name = "Memes",
                            UpdatedAt = new DateTime(2023, 6, 3, 11, 8, 6, 374, DateTimeKind.Local).AddTicks(2927)
                        },
                        new
                        {
                            Id = 25,
                            CreatedAt = new DateTime(2023, 6, 3, 11, 8, 6, 374, DateTimeKind.Local).AddTicks(2928),
                            Name = "Funny",
                            UpdatedAt = new DateTime(2023, 6, 3, 11, 8, 6, 374, DateTimeKind.Local).AddTicks(2928)
                        },
                        new
                        {
                            Id = 26,
                            CreatedAt = new DateTime(2023, 6, 3, 11, 8, 6, 374, DateTimeKind.Local).AddTicks(2929),
                            Name = "Jokes",
                            UpdatedAt = new DateTime(2023, 6, 3, 11, 8, 6, 374, DateTimeKind.Local).AddTicks(2929)
                        },
                        new
                        {
                            Id = 27,
                            CreatedAt = new DateTime(2023, 6, 3, 11, 8, 6, 374, DateTimeKind.Local).AddTicks(2930),
                            Name = "History",
                            UpdatedAt = new DateTime(2023, 6, 3, 11, 8, 6, 374, DateTimeKind.Local).AddTicks(2931)
                        },
                        new
                        {
                            Id = 28,
                            CreatedAt = new DateTime(2023, 6, 3, 11, 8, 6, 374, DateTimeKind.Local).AddTicks(2931),
                            Name = "Philosophy",
                            UpdatedAt = new DateTime(2023, 6, 3, 11, 8, 6, 374, DateTimeKind.Local).AddTicks(2932)
                        },
                        new
                        {
                            Id = 29,
                            CreatedAt = new DateTime(2023, 6, 3, 11, 8, 6, 374, DateTimeKind.Local).AddTicks(2933),
                            Name = "Psychology",
                            UpdatedAt = new DateTime(2023, 6, 3, 11, 8, 6, 374, DateTimeKind.Local).AddTicks(2933)
                        },
                        new
                        {
                            Id = 30,
                            CreatedAt = new DateTime(2023, 6, 3, 11, 8, 6, 374, DateTimeKind.Local).AddTicks(2934),
                            Name = "Education",
                            UpdatedAt = new DateTime(2023, 6, 3, 11, 8, 6, 374, DateTimeKind.Local).AddTicks(2934)
                        },
                        new
                        {
                            Id = 31,
                            CreatedAt = new DateTime(2023, 6, 3, 11, 8, 6, 374, DateTimeKind.Local).AddTicks(2935),
                            Name = "Career",
                            UpdatedAt = new DateTime(2023, 6, 3, 11, 8, 6, 374, DateTimeKind.Local).AddTicks(2935)
                        },
                        new
                        {
                            Id = 32,
                            CreatedAt = new DateTime(2023, 6, 3, 11, 8, 6, 374, DateTimeKind.Local).AddTicks(2936),
                            Name = "Personal Finance",
                            UpdatedAt = new DateTime(2023, 6, 3, 11, 8, 6, 374, DateTimeKind.Local).AddTicks(2936)
                        },
                        new
                        {
                            Id = 33,
                            CreatedAt = new DateTime(2023, 6, 3, 11, 8, 6, 374, DateTimeKind.Local).AddTicks(2937),
                            Name = "Entrepreneurship",
                            UpdatedAt = new DateTime(2023, 6, 3, 11, 8, 6, 374, DateTimeKind.Local).AddTicks(2937)
                        },
                        new
                        {
                            Id = 34,
                            CreatedAt = new DateTime(2023, 6, 3, 11, 8, 6, 374, DateTimeKind.Local).AddTicks(2939),
                            Name = "Parenting",
                            UpdatedAt = new DateTime(2023, 6, 3, 11, 8, 6, 374, DateTimeKind.Local).AddTicks(2940)
                        },
                        new
                        {
                            Id = 35,
                            CreatedAt = new DateTime(2023, 6, 3, 11, 8, 6, 374, DateTimeKind.Local).AddTicks(2940),
                            Name = "Relationships",
                            UpdatedAt = new DateTime(2023, 6, 3, 11, 8, 6, 374, DateTimeKind.Local).AddTicks(2941)
                        },
                        new
                        {
                            Id = 36,
                            CreatedAt = new DateTime(2023, 6, 3, 11, 8, 6, 374, DateTimeKind.Local).AddTicks(2942),
                            Name = "Technology News",
                            UpdatedAt = new DateTime(2023, 6, 3, 11, 8, 6, 374, DateTimeKind.Local).AddTicks(2942)
                        },
                        new
                        {
                            Id = 37,
                            CreatedAt = new DateTime(2023, 6, 3, 11, 8, 6, 374, DateTimeKind.Local).AddTicks(2943),
                            Name = "Programming",
                            UpdatedAt = new DateTime(2023, 6, 3, 11, 8, 6, 374, DateTimeKind.Local).AddTicks(2943)
                        },
                        new
                        {
                            Id = 38,
                            CreatedAt = new DateTime(2023, 6, 3, 11, 8, 6, 374, DateTimeKind.Local).AddTicks(2944),
                            Name = "Web Development",
                            UpdatedAt = new DateTime(2023, 6, 3, 11, 8, 6, 374, DateTimeKind.Local).AddTicks(2944)
                        },
                        new
                        {
                            Id = 39,
                            CreatedAt = new DateTime(2023, 6, 3, 11, 8, 6, 374, DateTimeKind.Local).AddTicks(2945),
                            Name = "Data Science",
                            UpdatedAt = new DateTime(2023, 6, 3, 11, 8, 6, 374, DateTimeKind.Local).AddTicks(2945)
                        },
                        new
                        {
                            Id = 40,
                            CreatedAt = new DateTime(2023, 6, 3, 11, 8, 6, 374, DateTimeKind.Local).AddTicks(2946),
                            Name = "Cryptocurrency",
                            UpdatedAt = new DateTime(2023, 6, 3, 11, 8, 6, 374, DateTimeKind.Local).AddTicks(2946)
                        },
                        new
                        {
                            Id = 41,
                            CreatedAt = new DateTime(2023, 6, 3, 11, 8, 6, 374, DateTimeKind.Local).AddTicks(2947),
                            Name = "Design",
                            UpdatedAt = new DateTime(2023, 6, 3, 11, 8, 6, 374, DateTimeKind.Local).AddTicks(2948)
                        },
                        new
                        {
                            Id = 42,
                            CreatedAt = new DateTime(2023, 6, 3, 11, 8, 6, 374, DateTimeKind.Local).AddTicks(2948),
                            Name = "Gaming News",
                            UpdatedAt = new DateTime(2023, 6, 3, 11, 8, 6, 374, DateTimeKind.Local).AddTicks(2949)
                        },
                        new
                        {
                            Id = 43,
                            CreatedAt = new DateTime(2023, 6, 3, 11, 8, 6, 374, DateTimeKind.Local).AddTicks(2950),
                            Name = "PC Gaming",
                            UpdatedAt = new DateTime(2023, 6, 3, 11, 8, 6, 374, DateTimeKind.Local).AddTicks(2950)
                        },
                        new
                        {
                            Id = 44,
                            CreatedAt = new DateTime(2023, 6, 3, 11, 8, 6, 374, DateTimeKind.Local).AddTicks(2951),
                            Name = "Console Gaming",
                            UpdatedAt = new DateTime(2023, 6, 3, 11, 8, 6, 374, DateTimeKind.Local).AddTicks(2951)
                        },
                        new
                        {
                            Id = 45,
                            CreatedAt = new DateTime(2023, 6, 3, 11, 8, 6, 374, DateTimeKind.Local).AddTicks(2952),
                            Name = "Mobile Gaming",
                            UpdatedAt = new DateTime(2023, 6, 3, 11, 8, 6, 374, DateTimeKind.Local).AddTicks(2953)
                        },
                        new
                        {
                            Id = 46,
                            CreatedAt = new DateTime(2023, 6, 3, 11, 8, 6, 374, DateTimeKind.Local).AddTicks(2953),
                            Name = "Esports",
                            UpdatedAt = new DateTime(2023, 6, 3, 11, 8, 6, 374, DateTimeKind.Local).AddTicks(2954)
                        },
                        new
                        {
                            Id = 47,
                            CreatedAt = new DateTime(2023, 6, 3, 11, 8, 6, 374, DateTimeKind.Local).AddTicks(2955),
                            Name = "Music News",
                            UpdatedAt = new DateTime(2023, 6, 3, 11, 8, 6, 374, DateTimeKind.Local).AddTicks(2955)
                        },
                        new
                        {
                            Id = 48,
                            CreatedAt = new DateTime(2023, 6, 3, 11, 8, 6, 374, DateTimeKind.Local).AddTicks(2956),
                            Name = "Hip-Hop",
                            UpdatedAt = new DateTime(2023, 6, 3, 11, 8, 6, 374, DateTimeKind.Local).AddTicks(2956)
                        },
                        new
                        {
                            Id = 49,
                            CreatedAt = new DateTime(2023, 6, 3, 11, 8, 6, 374, DateTimeKind.Local).AddTicks(2957),
                            Name = "Rock",
                            UpdatedAt = new DateTime(2023, 6, 3, 11, 8, 6, 374, DateTimeKind.Local).AddTicks(2957)
                        },
                        new
                        {
                            Id = 50,
                            CreatedAt = new DateTime(2023, 6, 3, 11, 8, 6, 374, DateTimeKind.Local).AddTicks(2958),
                            Name = "Pop Culture",
                            UpdatedAt = new DateTime(2023, 6, 3, 11, 8, 6, 374, DateTimeKind.Local).AddTicks(2958)
                        },
                        new
                        {
                            Id = 51,
                            CreatedAt = new DateTime(2023, 6, 3, 11, 8, 6, 374, DateTimeKind.Local).AddTicks(2959),
                            Name = "Fitness Motivation",
                            UpdatedAt = new DateTime(2023, 6, 3, 11, 8, 6, 374, DateTimeKind.Local).AddTicks(2960)
                        },
                        new
                        {
                            Id = 52,
                            CreatedAt = new DateTime(2023, 6, 3, 11, 8, 6, 374, DateTimeKind.Local).AddTicks(2960),
                            Name = "Nutrition",
                            UpdatedAt = new DateTime(2023, 6, 3, 11, 8, 6, 374, DateTimeKind.Local).AddTicks(2961)
                        },
                        new
                        {
                            Id = 53,
                            CreatedAt = new DateTime(2023, 6, 3, 11, 8, 6, 374, DateTimeKind.Local).AddTicks(2961),
                            Name = "Weightlifting",
                            UpdatedAt = new DateTime(2023, 6, 3, 11, 8, 6, 374, DateTimeKind.Local).AddTicks(2962)
                        },
                        new
                        {
                            Id = 54,
                            CreatedAt = new DateTime(2023, 6, 3, 11, 8, 6, 374, DateTimeKind.Local).AddTicks(2963),
                            Name = "Yoga",
                            UpdatedAt = new DateTime(2023, 6, 3, 11, 8, 6, 374, DateTimeKind.Local).AddTicks(2963)
                        },
                        new
                        {
                            Id = 55,
                            CreatedAt = new DateTime(2023, 6, 3, 11, 8, 6, 374, DateTimeKind.Local).AddTicks(2964),
                            Name = "Running",
                            UpdatedAt = new DateTime(2023, 6, 3, 11, 8, 6, 374, DateTimeKind.Local).AddTicks(2964)
                        },
                        new
                        {
                            Id = 56,
                            CreatedAt = new DateTime(2023, 6, 3, 11, 8, 6, 374, DateTimeKind.Local).AddTicks(2965),
                            Name = "Cycling",
                            UpdatedAt = new DateTime(2023, 6, 3, 11, 8, 6, 374, DateTimeKind.Local).AddTicks(2965)
                        },
                        new
                        {
                            Id = 57,
                            CreatedAt = new DateTime(2023, 6, 3, 11, 8, 6, 374, DateTimeKind.Local).AddTicks(2966),
                            Name = "CrossFit",
                            UpdatedAt = new DateTime(2023, 6, 3, 11, 8, 6, 374, DateTimeKind.Local).AddTicks(2966)
                        },
                        new
                        {
                            Id = 58,
                            CreatedAt = new DateTime(2023, 6, 3, 11, 8, 6, 374, DateTimeKind.Local).AddTicks(2967),
                            Name = "Bodybuilding",
                            UpdatedAt = new DateTime(2023, 6, 3, 11, 8, 6, 374, DateTimeKind.Local).AddTicks(2968)
                        },
                        new
                        {
                            Id = 59,
                            CreatedAt = new DateTime(2023, 6, 3, 11, 8, 6, 374, DateTimeKind.Local).AddTicks(2970),
                            Name = "Productivity",
                            UpdatedAt = new DateTime(2023, 6, 3, 11, 8, 6, 374, DateTimeKind.Local).AddTicks(2970)
                        },
                        new
                        {
                            Id = 60,
                            CreatedAt = new DateTime(2023, 6, 3, 11, 8, 6, 374, DateTimeKind.Local).AddTicks(2971),
                            Name = "Self-improvement",
                            UpdatedAt = new DateTime(2023, 6, 3, 11, 8, 6, 374, DateTimeKind.Local).AddTicks(2971)
                        },
                        new
                        {
                            Id = 61,
                            CreatedAt = new DateTime(2023, 6, 3, 11, 8, 6, 374, DateTimeKind.Local).AddTicks(2972),
                            Name = "Meditation",
                            UpdatedAt = new DateTime(2023, 6, 3, 11, 8, 6, 374, DateTimeKind.Local).AddTicks(2972)
                        },
                        new
                        {
                            Id = 62,
                            CreatedAt = new DateTime(2023, 6, 3, 11, 8, 6, 374, DateTimeKind.Local).AddTicks(2973),
                            Name = "Mindfulness",
                            UpdatedAt = new DateTime(2023, 6, 3, 11, 8, 6, 374, DateTimeKind.Local).AddTicks(2973)
                        },
                        new
                        {
                            Id = 63,
                            CreatedAt = new DateTime(2023, 6, 3, 11, 8, 6, 374, DateTimeKind.Local).AddTicks(2974),
                            Name = "Motivation",
                            UpdatedAt = new DateTime(2023, 6, 3, 11, 8, 6, 374, DateTimeKind.Local).AddTicks(2975)
                        },
                        new
                        {
                            Id = 64,
                            CreatedAt = new DateTime(2023, 6, 3, 11, 8, 6, 374, DateTimeKind.Local).AddTicks(2975),
                            Name = "Self-care",
                            UpdatedAt = new DateTime(2023, 6, 3, 11, 8, 6, 374, DateTimeKind.Local).AddTicks(2976)
                        },
                        new
                        {
                            Id = 65,
                            CreatedAt = new DateTime(2023, 6, 3, 11, 8, 6, 374, DateTimeKind.Local).AddTicks(2977),
                            Name = "Cooking",
                            UpdatedAt = new DateTime(2023, 6, 3, 11, 8, 6, 374, DateTimeKind.Local).AddTicks(2977)
                        },
                        new
                        {
                            Id = 66,
                            CreatedAt = new DateTime(2023, 6, 3, 11, 8, 6, 374, DateTimeKind.Local).AddTicks(2979),
                            Name = "Baking",
                            UpdatedAt = new DateTime(2023, 6, 3, 11, 8, 6, 374, DateTimeKind.Local).AddTicks(2979)
                        },
                        new
                        {
                            Id = 67,
                            CreatedAt = new DateTime(2023, 6, 3, 11, 8, 6, 374, DateTimeKind.Local).AddTicks(2980),
                            Name = "Grilling",
                            UpdatedAt = new DateTime(2023, 6, 3, 11, 8, 6, 374, DateTimeKind.Local).AddTicks(2980)
                        },
                        new
                        {
                            Id = 68,
                            CreatedAt = new DateTime(2023, 6, 3, 11, 8, 6, 374, DateTimeKind.Local).AddTicks(2981),
                            Name = "Veganism",
                            UpdatedAt = new DateTime(2023, 6, 3, 11, 8, 6, 374, DateTimeKind.Local).AddTicks(2981)
                        },
                        new
                        {
                            Id = 69,
                            CreatedAt = new DateTime(2023, 6, 3, 11, 8, 6, 374, DateTimeKind.Local).AddTicks(2982),
                            Name = "Vegetarianism",
                            UpdatedAt = new DateTime(2023, 6, 3, 11, 8, 6, 374, DateTimeKind.Local).AddTicks(2982)
                        },
                        new
                        {
                            Id = 70,
                            CreatedAt = new DateTime(2023, 6, 3, 11, 8, 6, 374, DateTimeKind.Local).AddTicks(2983),
                            Name = "Meal Prep",
                            UpdatedAt = new DateTime(2023, 6, 3, 11, 8, 6, 374, DateTimeKind.Local).AddTicks(2983)
                        },
                        new
                        {
                            Id = 71,
                            CreatedAt = new DateTime(2023, 6, 3, 11, 8, 6, 374, DateTimeKind.Local).AddTicks(2984),
                            Name = "Gardening",
                            UpdatedAt = new DateTime(2023, 6, 3, 11, 8, 6, 374, DateTimeKind.Local).AddTicks(2985)
                        },
                        new
                        {
                            Id = 72,
                            CreatedAt = new DateTime(2023, 6, 3, 11, 8, 6, 374, DateTimeKind.Local).AddTicks(3026),
                            Name = "Home Improvement",
                            UpdatedAt = new DateTime(2023, 6, 3, 11, 8, 6, 374, DateTimeKind.Local).AddTicks(3026)
                        },
                        new
                        {
                            Id = 73,
                            CreatedAt = new DateTime(2023, 6, 3, 11, 8, 6, 374, DateTimeKind.Local).AddTicks(3234),
                            Name = "Interior Design",
                            UpdatedAt = new DateTime(2023, 6, 3, 11, 8, 6, 374, DateTimeKind.Local).AddTicks(3234)
                        },
                        new
                        {
                            Id = 74,
                            CreatedAt = new DateTime(2023, 6, 3, 11, 8, 6, 374, DateTimeKind.Local).AddTicks(3235),
                            Name = "Real Estate",
                            UpdatedAt = new DateTime(2023, 6, 3, 11, 8, 6, 374, DateTimeKind.Local).AddTicks(3235)
                        },
                        new
                        {
                            Id = 75,
                            CreatedAt = new DateTime(2023, 6, 3, 11, 8, 6, 374, DateTimeKind.Local).AddTicks(3423),
                            Name = "Personal Finance Tips",
                            UpdatedAt = new DateTime(2023, 6, 3, 11, 8, 6, 374, DateTimeKind.Local).AddTicks(3424)
                        },
                        new
                        {
                            Id = 76,
                            CreatedAt = new DateTime(2023, 6, 3, 11, 8, 6, 374, DateTimeKind.Local).AddTicks(3425),
                            Name = "Investing",
                            UpdatedAt = new DateTime(2023, 6, 3, 11, 8, 6, 374, DateTimeKind.Local).AddTicks(3425)
                        },
                        new
                        {
                            Id = 77,
                            CreatedAt = new DateTime(2023, 6, 3, 11, 8, 6, 374, DateTimeKind.Local).AddTicks(3426),
                            Name = "Stock Market",
                            UpdatedAt = new DateTime(2023, 6, 3, 11, 8, 6, 374, DateTimeKind.Local).AddTicks(3426)
                        },
                        new
                        {
                            Id = 78,
                            CreatedAt = new DateTime(2023, 6, 3, 11, 8, 6, 374, DateTimeKind.Local).AddTicks(3427),
                            Name = "Cryptocurrency Trading",
                            UpdatedAt = new DateTime(2023, 6, 3, 11, 8, 6, 374, DateTimeKind.Local).AddTicks(3428)
                        },
                        new
                        {
                            Id = 79,
                            CreatedAt = new DateTime(2023, 6, 3, 11, 8, 6, 374, DateTimeKind.Local).AddTicks(3429),
                            Name = "Entrepreneur Stories",
                            UpdatedAt = new DateTime(2023, 6, 3, 11, 8, 6, 374, DateTimeKind.Local).AddTicks(3429)
                        },
                        new
                        {
                            Id = 80,
                            CreatedAt = new DateTime(2023, 6, 3, 11, 8, 6, 374, DateTimeKind.Local).AddTicks(3430),
                            Name = "Startups",
                            UpdatedAt = new DateTime(2023, 6, 3, 11, 8, 6, 374, DateTimeKind.Local).AddTicks(3430)
                        },
                        new
                        {
                            Id = 81,
                            CreatedAt = new DateTime(2023, 6, 3, 11, 8, 6, 374, DateTimeKind.Local).AddTicks(3431),
                            Name = "Small Business",
                            UpdatedAt = new DateTime(2023, 6, 3, 11, 8, 6, 374, DateTimeKind.Local).AddTicks(3431)
                        },
                        new
                        {
                            Id = 82,
                            CreatedAt = new DateTime(2023, 6, 3, 11, 8, 6, 374, DateTimeKind.Local).AddTicks(3432),
                            Name = "Marketing",
                            UpdatedAt = new DateTime(2023, 6, 3, 11, 8, 6, 374, DateTimeKind.Local).AddTicks(3433)
                        },
                        new
                        {
                            Id = 83,
                            CreatedAt = new DateTime(2023, 6, 3, 11, 8, 6, 374, DateTimeKind.Local).AddTicks(3434),
                            Name = "Social Media",
                            UpdatedAt = new DateTime(2023, 6, 3, 11, 8, 6, 374, DateTimeKind.Local).AddTicks(3435)
                        },
                        new
                        {
                            Id = 84,
                            CreatedAt = new DateTime(2023, 6, 3, 11, 8, 6, 374, DateTimeKind.Local).AddTicks(3436),
                            Name = "Podcasts",
                            UpdatedAt = new DateTime(2023, 6, 3, 11, 8, 6, 374, DateTimeKind.Local).AddTicks(3436)
                        },
                        new
                        {
                            Id = 85,
                            CreatedAt = new DateTime(2023, 6, 3, 11, 8, 6, 374, DateTimeKind.Local).AddTicks(3437),
                            Name = "Writing Prompts",
                            UpdatedAt = new DateTime(2023, 6, 3, 11, 8, 6, 374, DateTimeKind.Local).AddTicks(3437)
                        },
                        new
                        {
                            Id = 86,
                            CreatedAt = new DateTime(2023, 6, 3, 11, 8, 6, 374, DateTimeKind.Local).AddTicks(3438),
                            Name = "Fantasy",
                            UpdatedAt = new DateTime(2023, 6, 3, 11, 8, 6, 374, DateTimeKind.Local).AddTicks(3438)
                        },
                        new
                        {
                            Id = 87,
                            CreatedAt = new DateTime(2023, 6, 3, 11, 8, 6, 374, DateTimeKind.Local).AddTicks(3439),
                            Name = "Science Fiction",
                            UpdatedAt = new DateTime(2023, 6, 3, 11, 8, 6, 374, DateTimeKind.Local).AddTicks(3440)
                        },
                        new
                        {
                            Id = 88,
                            CreatedAt = new DateTime(2023, 6, 3, 11, 8, 6, 374, DateTimeKind.Local).AddTicks(3441),
                            Name = "Horror",
                            UpdatedAt = new DateTime(2023, 6, 3, 11, 8, 6, 374, DateTimeKind.Local).AddTicks(3441)
                        },
                        new
                        {
                            Id = 89,
                            CreatedAt = new DateTime(2023, 6, 3, 11, 8, 6, 374, DateTimeKind.Local).AddTicks(3442),
                            Name = "Thrillers",
                            UpdatedAt = new DateTime(2023, 6, 3, 11, 8, 6, 374, DateTimeKind.Local).AddTicks(3442)
                        },
                        new
                        {
                            Id = 90,
                            CreatedAt = new DateTime(2023, 6, 3, 11, 8, 6, 374, DateTimeKind.Local).AddTicks(3443),
                            Name = "True Crime",
                            UpdatedAt = new DateTime(2023, 6, 3, 11, 8, 6, 374, DateTimeKind.Local).AddTicks(3443)
                        },
                        new
                        {
                            Id = 91,
                            CreatedAt = new DateTime(2023, 6, 3, 11, 8, 6, 374, DateTimeKind.Local).AddTicks(3444),
                            Name = "Paranormal",
                            UpdatedAt = new DateTime(2023, 6, 3, 11, 8, 6, 374, DateTimeKind.Local).AddTicks(3444)
                        },
                        new
                        {
                            Id = 92,
                            CreatedAt = new DateTime(2023, 6, 3, 11, 8, 6, 374, DateTimeKind.Local).AddTicks(3445),
                            Name = "Comics",
                            UpdatedAt = new DateTime(2023, 6, 3, 11, 8, 6, 374, DateTimeKind.Local).AddTicks(3446)
                        },
                        new
                        {
                            Id = 93,
                            CreatedAt = new DateTime(2023, 6, 3, 11, 8, 6, 374, DateTimeKind.Local).AddTicks(3447),
                            Name = "Anime",
                            UpdatedAt = new DateTime(2023, 6, 3, 11, 8, 6, 374, DateTimeKind.Local).AddTicks(3447)
                        },
                        new
                        {
                            Id = 94,
                            CreatedAt = new DateTime(2023, 6, 3, 11, 8, 6, 374, DateTimeKind.Local).AddTicks(3448),
                            Name = "Manga",
                            UpdatedAt = new DateTime(2023, 6, 3, 11, 8, 6, 374, DateTimeKind.Local).AddTicks(3448)
                        },
                        new
                        {
                            Id = 95,
                            CreatedAt = new DateTime(2023, 6, 3, 11, 8, 6, 374, DateTimeKind.Local).AddTicks(3449),
                            Name = "Board Games",
                            UpdatedAt = new DateTime(2023, 6, 3, 11, 8, 6, 374, DateTimeKind.Local).AddTicks(3449)
                        },
                        new
                        {
                            Id = 96,
                            CreatedAt = new DateTime(2023, 6, 3, 11, 8, 6, 374, DateTimeKind.Local).AddTicks(3450),
                            Name = "Card Games",
                            UpdatedAt = new DateTime(2023, 6, 3, 11, 8, 6, 374, DateTimeKind.Local).AddTicks(3450)
                        },
                        new
                        {
                            Id = 97,
                            CreatedAt = new DateTime(2023, 6, 3, 11, 8, 6, 374, DateTimeKind.Local).AddTicks(3452),
                            Name = "Tabletop RPGs",
                            UpdatedAt = new DateTime(2023, 6, 3, 11, 8, 6, 374, DateTimeKind.Local).AddTicks(3452)
                        },
                        new
                        {
                            Id = 98,
                            CreatedAt = new DateTime(2023, 6, 3, 11, 8, 6, 374, DateTimeKind.Local).AddTicks(3453),
                            Name = "Travel Photography",
                            UpdatedAt = new DateTime(2023, 6, 3, 11, 8, 6, 374, DateTimeKind.Local).AddTicks(3453)
                        },
                        new
                        {
                            Id = 99,
                            CreatedAt = new DateTime(2023, 6, 3, 11, 8, 6, 374, DateTimeKind.Local).AddTicks(3454),
                            Name = "Outdoor Adventures",
                            UpdatedAt = new DateTime(2023, 6, 3, 11, 8, 6, 374, DateTimeKind.Local).AddTicks(3455)
                        },
                        new
                        {
                            Id = 100,
                            CreatedAt = new DateTime(2023, 6, 3, 11, 8, 6, 374, DateTimeKind.Local).AddTicks(3455),
                            Name = "Celebrities",
                            UpdatedAt = new DateTime(2023, 6, 3, 11, 8, 6, 374, DateTimeKind.Local).AddTicks(3456)
                        });
                });

            modelBuilder.Entity("Screamer.Domain.Entities.ChatRoom", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasAnnotation("Relational:JsonPropertyName", "createdAt");

                    b.Property<int?>("LatestMessageId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasAnnotation("Relational:JsonPropertyName", "updatedAt");

                    b.HasKey("Id");

                    b.HasIndex("LatestMessageId");

                    b.ToTable("ChatRooms");
                });

            modelBuilder.Entity("Screamer.Domain.Entities.ChatRoomUser", b =>
                {
                    b.Property<int>("ChatroomId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasAnnotation("Relational:JsonPropertyName", "createdAt");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasAnnotation("Relational:JsonPropertyName", "updatedAt");

                    b.HasKey("ChatroomId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("ChatRoomUser");
                });

            modelBuilder.Entity("Screamer.Domain.Entities.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasAnnotation("Relational:JsonPropertyName", "createdAt");

                    b.Property<int?>("ParentCommentId")
                        .HasColumnType("int");

                    b.Property<int>("PostId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasAnnotation("Relational:JsonPropertyName", "updatedAt");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ParentCommentId");

                    b.HasIndex("PostId");

                    b.HasIndex("UserId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("Screamer.Domain.Entities.CommentReaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CommentId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasAnnotation("Relational:JsonPropertyName", "createdAt");

                    b.Property<string>("ReactionType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasAnnotation("Relational:JsonPropertyName", "updatedAt");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CommentId");

                    b.HasIndex("UserId");

                    b.ToTable("CommentReactions");
                });

            modelBuilder.Entity("Screamer.Domain.Entities.Connection", b =>
                {
                    b.Property<string>("ConnectionId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("GroupName")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ConnectionId");

                    b.HasIndex("GroupName");

                    b.ToTable("Connections");
                });

            modelBuilder.Entity("Screamer.Domain.Entities.Cover", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasAnnotation("Relational:JsonPropertyName", "createdAt");

                    b.Property<bool>("IsMain")
                        .HasColumnType("bit");

                    b.Property<string>("PublicId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasAnnotation("Relational:JsonPropertyName", "updatedAt");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Cover");
                });

            modelBuilder.Entity("Screamer.Domain.Entities.Group", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Name");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("Screamer.Domain.Entities.Hashtag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasAnnotation("Relational:JsonPropertyName", "createdAt");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasAnnotation("Relational:JsonPropertyName", "updatedAt");

                    b.HasKey("Id");

                    b.ToTable("Hashtags");
                });

            modelBuilder.Entity("Screamer.Domain.Entities.Message", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()")
                        .HasAnnotation("Relational:JsonPropertyName", "createdAt");

                    b.Property<DateTime?>("DateRead")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("MessageSent")
                        .HasColumnType("datetime2");

                    b.Property<bool>("RecipientDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("RecipientId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RecipientUsername")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("SenderDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("SenderId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SenderUsername")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()")
                        .HasAnnotation("Relational:JsonPropertyName", "updatedAt");

                    b.HasKey("Id");

                    b.HasIndex("RecipientId");

                    b.HasIndex("SenderId");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("Screamer.Domain.Entities.Mood", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasAnnotation("Relational:JsonPropertyName", "createdAt");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasAnnotation("Relational:JsonPropertyName", "updatedAt");

                    b.HasKey("Id");

                    b.ToTable("Moods");
                });

            modelBuilder.Entity("Screamer.Domain.Entities.PostCategory", b =>
                {
                    b.Property<int>("PostId")
                        .HasColumnType("int");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasAnnotation("Relational:JsonPropertyName", "createdAt");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasAnnotation("Relational:JsonPropertyName", "updatedAt");

                    b.HasKey("PostId", "CategoryId");

                    b.HasIndex("CategoryId");

                    b.ToTable("PostCategories");
                });

            modelBuilder.Entity("Screamer.Domain.Entities.PostHashtag", b =>
                {
                    b.Property<int>("PostId")
                        .HasColumnType("int");

                    b.Property<int>("HashtagId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasAnnotation("Relational:JsonPropertyName", "createdAt");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasAnnotation("Relational:JsonPropertyName", "updatedAt");

                    b.HasKey("PostId", "HashtagId");

                    b.HasIndex("HashtagId");

                    b.ToTable("PostHashtags");
                });

            modelBuilder.Entity("Screamer.Domain.Entities.PostImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasAnnotation("Relational:JsonPropertyName", "createdAt");

                    b.Property<bool>("IsMain")
                        .HasColumnType("bit");

                    b.Property<int>("PostId")
                        .HasColumnType("int");

                    b.Property<string>("PublicId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasAnnotation("Relational:JsonPropertyName", "updatedAt");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PostId");

                    b.ToTable("PostImage");
                });

            modelBuilder.Entity("Screamer.Domain.Entities.PostReaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasAnnotation("Relational:JsonPropertyName", "createdAt");

                    b.Property<int>("PostId")
                        .HasColumnType("int");

                    b.Property<string>("ReactionType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasAnnotation("Relational:JsonPropertyName", "updatedAt");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("PostId");

                    b.HasIndex("UserId");

                    b.ToTable("PostReactions");
                });

            modelBuilder.Entity("Screamer.Domain.Entities.PostUserMention", b =>
                {
                    b.Property<int>("PostId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasAnnotation("Relational:JsonPropertyName", "createdAt");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasAnnotation("Relational:JsonPropertyName", "updatedAt");

                    b.HasKey("PostId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("PostUserMention");
                });

            modelBuilder.Entity("Screamer.Domain.Entities.PostUserTag", b =>
                {
                    b.Property<int>("PostId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasAnnotation("Relational:JsonPropertyName", "createdAt");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasAnnotation("Relational:JsonPropertyName", "updatedAt");

                    b.HasKey("PostId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("PostUserTag");
                });

            modelBuilder.Entity("Screamer.Domain.Entities.Social", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasAnnotation("Relational:JsonPropertyName", "createdAt");

                    b.Property<string>("Discord")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Facebook")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Github")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Instagram")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Linkedin")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Medium")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Onlyfans")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Patreon")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Pinterest")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Reddit")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Signal")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Skype")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Slack")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Snapchat")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Telegram")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Tiktok")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Tumblr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Twitch")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Twitter")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasAnnotation("Relational:JsonPropertyName", "updatedAt");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Viber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Wechat")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Whatsapp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Youtube")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasFilter("[UserId] IS NOT NULL");

                    b.ToTable("Social");
                });

            modelBuilder.Entity("Screamer.Domain.Follow", b =>
                {
                    b.Property<string>("SourceUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("TargetUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasAnnotation("Relational:JsonPropertyName", "createdAt");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasAnnotation("Relational:JsonPropertyName", "updatedAt");

                    b.HasKey("SourceUserId", "TargetUserId");

                    b.HasIndex("TargetUserId");

                    b.ToTable("Follows");
                });

            modelBuilder.Entity("Screamer.Identity.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("AvatarUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Bio")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Birthday")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CoverUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("ObjectID")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "objectID");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Website")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "8e445865-a24d-4543-a6c6-9443d048cdb9",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "28b8930d-18f5-43c4-9eea-95b20f8c70e5",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "admin@localhost.com",
                            EmailConfirmed = true,
                            FirstName = "System",
                            LastName = "Admin",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@LOCALHOST.COM",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAIAAYagAAAAEHjd5yV6UYuDCxRvzBHA7aPEd3nP4kjne2RnV1IVQspb02UPHisOKhv5O5uUKhxl5Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ade6f055-ac67-483b-ae5a-23d82ff027a9",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserName = "admin"
                        },
                        new
                        {
                            Id = "9e224968-33e4-4652-b7b7-8574d048cdb9",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "057ff207-96c5-48fb-b111-40dff5c22ad5",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user@localhost.com",
                            EmailConfirmed = true,
                            FirstName = "System",
                            LastName = "User",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER@LOCALHOST.COM",
                            NormalizedUserName = "USER",
                            PasswordHash = "AQAAAAIAAYagAAAAEIDx1IbgHWrh1U8LF7j2Q7yTpAmg8pofclQndYzB752CFt73nAMTdEaovcKrfIiMDQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "818b9679-3fe6-443c-a9b3-12caeae06f9f",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserName = "user"
                        },
                        new
                        {
                            Id = "9e224968-33e4-4652-b7b7-agfddsr",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a120e46f-cf08-4abd-a14a-b71f2dc9d848",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "mod@localhost.com",
                            EmailConfirmed = true,
                            FirstName = "System",
                            LastName = "Mod",
                            LockoutEnabled = false,
                            NormalizedEmail = "MOD@LOCALHOST.COM",
                            NormalizedUserName = "MOD",
                            PasswordHash = "AQAAAAIAAYagAAAAEMR44Hv5Kgh5zADwP18pfgz3aSkI/Hx34LWTNr8F73446F2W423OoNTBXriNgnU7Tw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "c245d8b4-fc59-44fc-9b31-262088b3adf7",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserName = "mod"
                        },
                        new
                        {
                            Id = "9e224968-33e4-4652-b7b7-ismailbentabett",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3306d94d-a956-4cf5-98e8-3dfce0f97ace",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "ismailbentabett@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Ismail",
                            LastName = "Bentabet",
                            LockoutEnabled = false,
                            NormalizedEmail = "ISMAILBENTABETT@GMAIL.COM",
                            NormalizedUserName = "ISMAILBENTABETT",
                            PasswordHash = "AQAAAAIAAYagAAAAEG5PQQSNQ8aCmJsSHB9FbUFUDT5qpJ8y35Y48Y7SzC5qdF8EvYG0+7FtffflLWyvag==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "0c40ecb6-d72e-41da-b958-8a2b5a105ca9",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserName = "ismailbentabett"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Screamer.Identity.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Screamer.Identity.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Screamer.Identity.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Screamer.Identity.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Screamer.Domain.Common.Avatar", b =>
                {
                    b.HasOne("Screamer.Identity.Models.ApplicationUser", "User")
                        .WithMany("Avatars")
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Screamer.Domain.Common.Post", b =>
                {
                    b.HasOne("Screamer.Domain.Entities.Mood", "Mood")
                        .WithMany("Posts")
                        .HasForeignKey("MoodId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Screamer.Identity.Models.ApplicationUser", "User")
                        .WithMany("Posts")
                        .HasForeignKey("UserId");

                    b.Navigation("Mood");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Screamer.Domain.Entities.Adress", b =>
                {
                    b.HasOne("Screamer.Identity.Models.ApplicationUser", "User")
                        .WithOne("Adress")
                        .HasForeignKey("Screamer.Domain.Entities.Adress", "UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Screamer.Domain.Entities.ChatRoom", b =>
                {
                    b.HasOne("Screamer.Domain.Entities.Message", "LatestMessage")
                        .WithMany()
                        .HasForeignKey("LatestMessageId");

                    b.Navigation("LatestMessage");
                });

            modelBuilder.Entity("Screamer.Domain.Entities.ChatRoomUser", b =>
                {
                    b.HasOne("Screamer.Domain.Entities.ChatRoom", "ChatRoom")
                        .WithMany("ChatRoomUsers")
                        .HasForeignKey("ChatroomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Screamer.Identity.Models.ApplicationUser", "User")
                        .WithMany("ChatRoomUsers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ChatRoom");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Screamer.Domain.Entities.Comment", b =>
                {
                    b.HasOne("Screamer.Domain.Entities.Comment", "ParentComment")
                        .WithMany("Replies")
                        .HasForeignKey("ParentCommentId");

                    b.HasOne("Screamer.Domain.Common.Post", "Post")
                        .WithMany("Comments")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Screamer.Identity.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("ParentComment");

                    b.Navigation("Post");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Screamer.Domain.Entities.CommentReaction", b =>
                {
                    b.HasOne("Screamer.Domain.Entities.Comment", "Comment")
                        .WithMany("Reactions")
                        .HasForeignKey("CommentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Screamer.Identity.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Comment");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Screamer.Domain.Entities.Connection", b =>
                {
                    b.HasOne("Screamer.Domain.Entities.Group", null)
                        .WithMany("Connections")
                        .HasForeignKey("GroupName");
                });

            modelBuilder.Entity("Screamer.Domain.Entities.Cover", b =>
                {
                    b.HasOne("Screamer.Identity.Models.ApplicationUser", "User")
                        .WithMany("Covers")
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Screamer.Domain.Entities.Message", b =>
                {
                    b.HasOne("Screamer.Identity.Models.ApplicationUser", "Recipient")
                        .WithMany("MessagesReceived")
                        .HasForeignKey("RecipientId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Screamer.Identity.Models.ApplicationUser", "Sender")
                        .WithMany("MessagesSent")
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Recipient");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("Screamer.Domain.Entities.PostCategory", b =>
                {
                    b.HasOne("Screamer.Domain.Entities.Category", "Category")
                        .WithMany("PostCategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Screamer.Domain.Common.Post", "Post")
                        .WithMany("PostCategories")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Post");
                });

            modelBuilder.Entity("Screamer.Domain.Entities.PostHashtag", b =>
                {
                    b.HasOne("Screamer.Domain.Entities.Hashtag", "Hashtag")
                        .WithMany("PostHashtags")
                        .HasForeignKey("HashtagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Screamer.Domain.Common.Post", "Post")
                        .WithMany("PostHashtags")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Hashtag");

                    b.Navigation("Post");
                });

            modelBuilder.Entity("Screamer.Domain.Entities.PostImage", b =>
                {
                    b.HasOne("Screamer.Domain.Common.Post", "Post")
                        .WithMany("PostImages")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Post");
                });

            modelBuilder.Entity("Screamer.Domain.Entities.PostReaction", b =>
                {
                    b.HasOne("Screamer.Domain.Common.Post", "Post")
                        .WithMany("Reactions")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Screamer.Identity.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Post");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Screamer.Domain.Entities.PostUserMention", b =>
                {
                    b.HasOne("Screamer.Domain.Common.Post", "Post")
                        .WithMany("PostUserMentions")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Screamer.Identity.Models.ApplicationUser", "User")
                        .WithMany("PostUserMentions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Post");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Screamer.Domain.Entities.PostUserTag", b =>
                {
                    b.HasOne("Screamer.Domain.Common.Post", "Post")
                        .WithMany("PostUserTags")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Screamer.Identity.Models.ApplicationUser", "User")
                        .WithMany("PostUserTags")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Post");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Screamer.Domain.Entities.Social", b =>
                {
                    b.HasOne("Screamer.Identity.Models.ApplicationUser", "User")
                        .WithOne("Socials")
                        .HasForeignKey("Screamer.Domain.Entities.Social", "UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Screamer.Domain.Follow", b =>
                {
                    b.HasOne("Screamer.Identity.Models.ApplicationUser", "SourceUser")
                        .WithMany("Following")
                        .HasForeignKey("SourceUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Screamer.Identity.Models.ApplicationUser", "TargetUser")
                        .WithMany("Followers")
                        .HasForeignKey("TargetUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("SourceUser");

                    b.Navigation("TargetUser");
                });

            modelBuilder.Entity("Screamer.Domain.Common.Post", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("PostCategories");

                    b.Navigation("PostHashtags");

                    b.Navigation("PostImages");

                    b.Navigation("PostUserMentions");

                    b.Navigation("PostUserTags");

                    b.Navigation("Reactions");
                });

            modelBuilder.Entity("Screamer.Domain.Entities.Category", b =>
                {
                    b.Navigation("PostCategories");
                });

            modelBuilder.Entity("Screamer.Domain.Entities.ChatRoom", b =>
                {
                    b.Navigation("ChatRoomUsers");
                });

            modelBuilder.Entity("Screamer.Domain.Entities.Comment", b =>
                {
                    b.Navigation("Reactions");

                    b.Navigation("Replies");
                });

            modelBuilder.Entity("Screamer.Domain.Entities.Group", b =>
                {
                    b.Navigation("Connections");
                });

            modelBuilder.Entity("Screamer.Domain.Entities.Hashtag", b =>
                {
                    b.Navigation("PostHashtags");
                });

            modelBuilder.Entity("Screamer.Domain.Entities.Mood", b =>
                {
                    b.Navigation("Posts");
                });

            modelBuilder.Entity("Screamer.Identity.Models.ApplicationUser", b =>
                {
                    b.Navigation("Adress");

                    b.Navigation("Avatars");

                    b.Navigation("ChatRoomUsers");

                    b.Navigation("Covers");

                    b.Navigation("Followers");

                    b.Navigation("Following");

                    b.Navigation("MessagesReceived");

                    b.Navigation("MessagesSent");

                    b.Navigation("PostUserMentions");

                    b.Navigation("PostUserTags");

                    b.Navigation("Posts");

                    b.Navigation("Socials");
                });
#pragma warning restore 612, 618
        }
    }
}
