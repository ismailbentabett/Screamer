// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Screamer.Presistance.DatabaseContext;

#nullable disable

namespace Screamer.Presistance.Migrations
{
    [DbContext(typeof(ScreamerDbContext))]
    [Migration("20230621162249_InitialMigration")]
    partial class InitialMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "cac43a6e-f7bb-4448-baaf-1add431ccbbf",
                            Name = "Moderator",
                            NormalizedName = "MODERATOR"
                        },
                        new
                        {
                            Id = "cbc43a8e-f7bb-4445-baaf-1add431ffbbf",
                            Name = "Administrator",
                            NormalizedName = "ADMINISTRATOR"
                        },
                        new
                        {
                            Id = "dbc43a8e-f7bb-4445-baaf-1999999999",
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "8e445865-a24d-4543-a6c6-9443d048cdb9",
                            RoleId = "cbc43a8e-f7bb-4445-baaf-1add431ffbbf"
                        },
                        new
                        {
                            UserId = "9e224968-33e4-4652-b7b7-8574d048cdb9",
                            RoleId = "cac43a6e-f7bb-4448-baaf-1add431ccbbf"
                        },
                        new
                        {
                            UserId = "9e224968-33e4-4652-b7b7-agfddsr",
                            RoleId = "dbc43a8e-f7bb-4445-baaf-1999999999"
                        },
                        new
                        {
                            UserId = "9e224968-33e4-4652-b7b7-ismailbentabett",
                            RoleId = "cbc43a8e-f7bb-4445-baaf-1add431ffbbf"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Screamer.Domain.Common.Avatar", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasAnnotation("Relational:JsonPropertyName", "createdAt");

                    b.Property<bool>("IsMain")
                        .HasColumnType("bit");

                    b.Property<string>("PublicId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasAnnotation("Relational:JsonPropertyName", "updatedAt");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Avatar");
                });

            modelBuilder.Entity("Screamer.Domain.Common.Post", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()")
                        .HasAnnotation("Relational:JsonPropertyName", "createdAt");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MoodId")
                        .HasColumnType("int");

                    b.Property<string>("ObjectID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()")
                        .HasAnnotation("Relational:JsonPropertyName", "updatedAt");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Views")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MoodId");

                    b.HasIndex("UserId");

                    b.ToTable("Posts");
                });

            modelBuilder.Entity("Screamer.Domain.Entities.Adress", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasAnnotation("Relational:JsonPropertyName", "createdAt");

                    b.Property<string>("PostalCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("State")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Street")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasAnnotation("Relational:JsonPropertyName", "updatedAt");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasFilter("[UserId] IS NOT NULL");

                    b.ToTable("Adress");
                });

            modelBuilder.Entity("Screamer.Domain.Entities.BookMark", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasAnnotation("Relational:JsonPropertyName", "createdAt");

                    b.Property<int>("PostId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasAnnotation("Relational:JsonPropertyName", "updatedAt");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("PostId");

                    b.HasIndex("UserId");

                    b.ToTable("BookMarks");
                });

            modelBuilder.Entity("Screamer.Domain.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasAnnotation("Relational:JsonPropertyName", "createdAt");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasAnnotation("Relational:JsonPropertyName", "updatedAt");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2023, 6, 21, 17, 22, 48, 703, DateTimeKind.Local).AddTicks(4003),
                            Name = "News",
                            UpdatedAt = new DateTime(2023, 6, 21, 17, 22, 48, 703, DateTimeKind.Local).AddTicks(4019)
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2023, 6, 21, 17, 22, 48, 703, DateTimeKind.Local).AddTicks(4024),
                            Name = "Politics",
                            UpdatedAt = new DateTime(2023, 6, 21, 17, 22, 48, 703, DateTimeKind.Local).AddTicks(4024)
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2023, 6, 21, 17, 22, 48, 703, DateTimeKind.Local).AddTicks(4025),
                            Name = "Science",
                            UpdatedAt = new DateTime(2023, 6, 21, 17, 22, 48, 703, DateTimeKind.Local).AddTicks(4026)
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2023, 6, 21, 17, 22, 48, 703, DateTimeKind.Local).AddTicks(4027),
                            Name = "Technology",
                            UpdatedAt = new DateTime(2023, 6, 21, 17, 22, 48, 703, DateTimeKind.Local).AddTicks(4027)
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2023, 6, 21, 17, 22, 48, 703, DateTimeKind.Local).AddTicks(4028),
                            Name = "Gaming",
                            UpdatedAt = new DateTime(2023, 6, 21, 17, 22, 48, 703, DateTimeKind.Local).AddTicks(4029)
                        },
                        new
                        {
                            Id = 6,
                            CreatedAt = new DateTime(2023, 6, 21, 17, 22, 48, 703, DateTimeKind.Local).AddTicks(4031),
                            Name = "Sports",
                            UpdatedAt = new DateTime(2023, 6, 21, 17, 22, 48, 703, DateTimeKind.Local).AddTicks(4031)
                        },
                        new
                        {
                            Id = 7,
                            CreatedAt = new DateTime(2023, 6, 21, 17, 22, 48, 703, DateTimeKind.Local).AddTicks(4032),
                            Name = "Music",
                            UpdatedAt = new DateTime(2023, 6, 21, 17, 22, 48, 703, DateTimeKind.Local).AddTicks(4033)
                        },
                        new
                        {
                            Id = 8,
                            CreatedAt = new DateTime(2023, 6, 21, 17, 22, 48, 703, DateTimeKind.Local).AddTicks(4033),
                            Name = "Movies",
                            UpdatedAt = new DateTime(2023, 6, 21, 17, 22, 48, 703, DateTimeKind.Local).AddTicks(4034)
                        },
                        new
                        {
                            Id = 9,
                            CreatedAt = new DateTime(2023, 6, 21, 17, 22, 48, 703, DateTimeKind.Local).AddTicks(4034),
                            Name = "Television",
                            UpdatedAt = new DateTime(2023, 6, 21, 17, 22, 48, 703, DateTimeKind.Local).AddTicks(4035)
                        },
                        new
                        {
                            Id = 10,
                            CreatedAt = new DateTime(2023, 6, 21, 17, 22, 48, 703, DateTimeKind.Local).AddTicks(4037),
                            Name = "Books",
                            UpdatedAt = new DateTime(2023, 6, 21, 17, 22, 48, 703, DateTimeKind.Local).AddTicks(4037)
                        },
                        new
                        {
                            Id = 11,
                            CreatedAt = new DateTime(2023, 6, 21, 17, 22, 48, 703, DateTimeKind.Local).AddTicks(4070),
                            Name = "Art",
                            UpdatedAt = new DateTime(2023, 6, 21, 17, 22, 48, 703, DateTimeKind.Local).AddTicks(4070)
                        },
                        new
                        {
                            Id = 12,
                            CreatedAt = new DateTime(2023, 6, 21, 17, 22, 48, 703, DateTimeKind.Local).AddTicks(4071),
                            Name = "Food",
                            UpdatedAt = new DateTime(2023, 6, 21, 17, 22, 48, 703, DateTimeKind.Local).AddTicks(4071)
                        },
                        new
                        {
                            Id = 13,
                            CreatedAt = new DateTime(2023, 6, 21, 17, 22, 48, 703, DateTimeKind.Local).AddTicks(4072),
                            Name = "Travel",
                            UpdatedAt = new DateTime(2023, 6, 21, 17, 22, 48, 703, DateTimeKind.Local).AddTicks(4073)
                        },
                        new
                        {
                            Id = 14,
                            CreatedAt = new DateTime(2023, 6, 21, 17, 22, 48, 703, DateTimeKind.Local).AddTicks(4079),
                            Name = "Fitness",
                            UpdatedAt = new DateTime(2023, 6, 21, 17, 22, 48, 703, DateTimeKind.Local).AddTicks(4079)
                        },
                        new
                        {
                            Id = 15,
                            CreatedAt = new DateTime(2023, 6, 21, 17, 22, 48, 703, DateTimeKind.Local).AddTicks(4080),
                            Name = "Health",
                            UpdatedAt = new DateTime(2023, 6, 21, 17, 22, 48, 703, DateTimeKind.Local).AddTicks(4087)
                        },
                        new
                        {
                            Id = 16,
                            CreatedAt = new DateTime(2023, 6, 21, 17, 22, 48, 703, DateTimeKind.Local).AddTicks(4099),
                            Name = "Fashion",
                            UpdatedAt = new DateTime(2023, 6, 21, 17, 22, 48, 703, DateTimeKind.Local).AddTicks(4100)
                        },
                        new
                        {
                            Id = 17,
                            CreatedAt = new DateTime(2023, 6, 21, 17, 22, 48, 703, DateTimeKind.Local).AddTicks(4101),
                            Name = "Relationships",
                            UpdatedAt = new DateTime(2023, 6, 21, 17, 22, 48, 703, DateTimeKind.Local).AddTicks(4101)
                        },
                        new
                        {
                            Id = 18,
                            CreatedAt = new DateTime(2023, 6, 21, 17, 22, 48, 703, DateTimeKind.Local).AddTicks(4103),
                            Name = "Advice",
                            UpdatedAt = new DateTime(2023, 6, 21, 17, 22, 48, 703, DateTimeKind.Local).AddTicks(4103)
                        },
                        new
                        {
                            Id = 19,
                            CreatedAt = new DateTime(2023, 6, 21, 17, 22, 48, 703, DateTimeKind.Local).AddTicks(4104),
                            Name = "Writing",
                            UpdatedAt = new DateTime(2023, 6, 21, 17, 22, 48, 703, DateTimeKind.Local).AddTicks(4105)
                        },
                        new
                        {
                            Id = 20,
                            CreatedAt = new DateTime(2023, 6, 21, 17, 22, 48, 703, DateTimeKind.Local).AddTicks(4105),
                            Name = "Photography",
                            UpdatedAt = new DateTime(2023, 6, 21, 17, 22, 48, 703, DateTimeKind.Local).AddTicks(4106)
                        },
                        new
                        {
                            Id = 21,
                            CreatedAt = new DateTime(2023, 6, 21, 17, 22, 48, 703, DateTimeKind.Local).AddTicks(4107),
                            Name = "DIY (Do-It-Yourself)",
                            UpdatedAt = new DateTime(2023, 6, 21, 17, 22, 48, 703, DateTimeKind.Local).AddTicks(4107)
                        },
                        new
                        {
                            Id = 22,
                            CreatedAt = new DateTime(2023, 6, 21, 17, 22, 48, 703, DateTimeKind.Local).AddTicks(4109),
                            Name = "Nature",
                            UpdatedAt = new DateTime(2023, 6, 21, 17, 22, 48, 703, DateTimeKind.Local).AddTicks(4109)
                        },
                        new
                        {
                            Id = 23,
                            CreatedAt = new DateTime(2023, 6, 21, 17, 22, 48, 703, DateTimeKind.Local).AddTicks(4110),
                            Name = "Animals",
                            UpdatedAt = new DateTime(2023, 6, 21, 17, 22, 48, 703, DateTimeKind.Local).AddTicks(4110)
                        },
                        new
                        {
                            Id = 24,
                            CreatedAt = new DateTime(2023, 6, 21, 17, 22, 48, 703, DateTimeKind.Local).AddTicks(4111),
                            Name = "Memes",
                            UpdatedAt = new DateTime(2023, 6, 21, 17, 22, 48, 703, DateTimeKind.Local).AddTicks(4111)
                        },
                        new
                        {
                            Id = 25,
                            CreatedAt = new DateTime(2023, 6, 21, 17, 22, 48, 703, DateTimeKind.Local).AddTicks(4112),
                            Name = "Funny",
                            UpdatedAt = new DateTime(2023, 6, 21, 17, 22, 48, 703, DateTimeKind.Local).AddTicks(4112)
                        },
                        new
                        {
                            Id = 26,
                            CreatedAt = new DateTime(2023, 6, 21, 17, 22, 48, 703, DateTimeKind.Local).AddTicks(4113),
                            Name = "Jokes",
                            UpdatedAt = new DateTime(2023, 6, 21, 17, 22, 48, 703, DateTimeKind.Local).AddTicks(4113)
                        },
                        new
                        {
                            Id = 27,
                            CreatedAt = new DateTime(2023, 6, 21, 17, 22, 48, 703, DateTimeKind.Local).AddTicks(4114),
                            Name = "History",
                            UpdatedAt = new DateTime(2023, 6, 21, 17, 22, 48, 703, DateTimeKind.Local).AddTicks(4115)
                        },
                        new
                        {
                            Id = 28,
                            CreatedAt = new DateTime(2023, 6, 21, 17, 22, 48, 703, DateTimeKind.Local).AddTicks(4115),
                            Name = "Philosophy",
                            UpdatedAt = new DateTime(2023, 6, 21, 17, 22, 48, 703, DateTimeKind.Local).AddTicks(4116)
                        },
                        new
                        {
                            Id = 29,
                            CreatedAt = new DateTime(2023, 6, 21, 17, 22, 48, 703, DateTimeKind.Local).AddTicks(4117),
                            Name = "Psychology",
                            UpdatedAt = new DateTime(2023, 6, 21, 17, 22, 48, 703, DateTimeKind.Local).AddTicks(4117)
                        },
                        new
                        {
                            Id = 30,
                            CreatedAt = new DateTime(2023, 6, 21, 17, 22, 48, 703, DateTimeKind.Local).AddTicks(4118),
                            Name = "Education",
                            UpdatedAt = new DateTime(2023, 6, 21, 17, 22, 48, 703, DateTimeKind.Local).AddTicks(4118)
                        },
                        new
                        {
                            Id = 31,
                            CreatedAt = new DateTime(2023, 6, 21, 17, 22, 48, 703, DateTimeKind.Local).AddTicks(4119),
                            Name = "Career",
                            UpdatedAt = new DateTime(2023, 6, 21, 17, 22, 48, 703, DateTimeKind.Local).AddTicks(4119)
                        },
                        new
                        {
                            Id = 32,
                            CreatedAt = new DateTime(2023, 6, 21, 17, 22, 48, 703, DateTimeKind.Local).AddTicks(4120),
                            Name = "Personal Finance",
                            UpdatedAt = new DateTime(2023, 6, 21, 17, 22, 48, 703, DateTimeKind.Local).AddTicks(4120)
                        },
                        new
                        {
                            Id = 33,
                            CreatedAt = new DateTime(2023, 6, 21, 17, 22, 48, 703, DateTimeKind.Local).AddTicks(4121),
                            Name = "Entrepreneurship",
                            UpdatedAt = new DateTime(2023, 6, 21, 17, 22, 48, 703, DateTimeKind.Local).AddTicks(4121)
                        },
                        new
                        {
                            Id = 34,
                            CreatedAt = new DateTime(2023, 6, 21, 17, 22, 48, 703, DateTimeKind.Local).AddTicks(4123),
                            Name = "Parenting",
                            UpdatedAt = new DateTime(2023, 6, 21, 17, 22, 48, 703, DateTimeKind.Local).AddTicks(4123)
                        },
                        new
                        {
                            Id = 35,
                            CreatedAt = new DateTime(2023, 6, 21, 17, 22, 48, 703, DateTimeKind.Local).AddTicks(4124),
                            Name = "Relationships",
                            UpdatedAt = new DateTime(2023, 6, 21, 17, 22, 48, 703, DateTimeKind.Local).AddTicks(4125)
                        },
                        new
                        {
                            Id = 36,
                            CreatedAt = new DateTime(2023, 6, 21, 17, 22, 48, 703, DateTimeKind.Local).AddTicks(4125),
                            Name = "Technology News",
                            UpdatedAt = new DateTime(2023, 6, 21, 17, 22, 48, 703, DateTimeKind.Local).AddTicks(4126)
                        },
                        new
                        {
                            Id = 37,
                            CreatedAt = new DateTime(2023, 6, 21, 17, 22, 48, 703, DateTimeKind.Local).AddTicks(4126),
                            Name = "Programming",
                            UpdatedAt = new DateTime(2023, 6, 21, 17, 22, 48, 703, DateTimeKind.Local).AddTicks(4127)
                        },
                        new
                        {
                            Id = 38,
                            CreatedAt = new DateTime(2023, 6, 21, 17, 22, 48, 703, DateTimeKind.Local).AddTicks(4128),
                            Name = "Web Development",
                            UpdatedAt = new DateTime(2023, 6, 21, 17, 22, 48, 703, DateTimeKind.Local).AddTicks(4128)
                        },
                        new
                        {
                            Id = 39,
                            CreatedAt = new DateTime(2023, 6, 21, 17, 22, 48, 703, DateTimeKind.Local).AddTicks(4129),
                            Name = "Data Science",
                            UpdatedAt = new DateTime(2023, 6, 21, 17, 22, 48, 703, DateTimeKind.Local).AddTicks(4129)
                        },
                        new
                        {
                            Id = 40,
                            CreatedAt = new DateTime(2023, 6, 21, 17, 22, 48, 703, DateTimeKind.Local).AddTicks(4130),
                            Name = "Cryptocurrency",
                            UpdatedAt = new DateTime(2023, 6, 21, 17, 22, 48, 703, DateTimeKind.Local).AddTicks(4130)
                        },
                        new
                        {
                            Id = 41,
                            CreatedAt = new DateTime(2023, 6, 21, 17, 22, 48, 703, DateTimeKind.Local).AddTicks(4131),
                            Name = "Design",
                            UpdatedAt = new DateTime(2023, 6, 21, 17, 22, 48, 703, DateTimeKind.Local).AddTicks(4131)
                        },
                        new
                        {
                            Id = 42,
                            CreatedAt = new DateTime(2023, 6, 21, 17, 22, 48, 703, DateTimeKind.Local).AddTicks(4133),
                            Name = "Gaming News",
                            UpdatedAt = new DateTime(2023, 6, 21, 17, 22, 48, 703, DateTimeKind.Local).AddTicks(4134)
                        },
                        new
                        {
                            Id = 43,
                            CreatedAt = new DateTime(2023, 6, 21, 17, 22, 48, 703, DateTimeKind.Local).AddTicks(4135),
                            Name = "PC Gaming",
                            UpdatedAt = new DateTime(2023, 6, 21, 17, 22, 48, 703, DateTimeKind.Local).AddTicks(4135)
                        },
                        new
                        {
                            Id = 44,
                            CreatedAt = new DateTime(2023, 6, 21, 17, 22, 48, 703, DateTimeKind.Local).AddTicks(4136),
                            Name = "Console Gaming",
                            UpdatedAt = new DateTime(2023, 6, 21, 17, 22, 48, 703, DateTimeKind.Local).AddTicks(4136)
                        },
                        new
                        {
                            Id = 45,
                            CreatedAt = new DateTime(2023, 6, 21, 17, 22, 48, 703, DateTimeKind.Local).AddTicks(4137),
                            Name = "Mobile Gaming",
                            UpdatedAt = new DateTime(2023, 6, 21, 17, 22, 48, 703, DateTimeKind.Local).AddTicks(4137)
                        },
                        new
                        {
                            Id = 46,
                            CreatedAt = new DateTime(2023, 6, 21, 17, 22, 48, 703, DateTimeKind.Local).AddTicks(4138),
                            Name = "Esports",
                            UpdatedAt = new DateTime(2023, 6, 21, 17, 22, 48, 703, DateTimeKind.Local).AddTicks(4138)
                        },
                        new
                        {
                            Id = 47,
                            CreatedAt = new DateTime(2023, 6, 21, 17, 22, 48, 703, DateTimeKind.Local).AddTicks(4139),
                            Name = "Music News",
                            UpdatedAt = new DateTime(2023, 6, 21, 17, 22, 48, 703, DateTimeKind.Local).AddTicks(4139)
                        },
                        new
                        {
                            Id = 48,
                            CreatedAt = new DateTime(2023, 6, 21, 17, 22, 48, 703, DateTimeKind.Local).AddTicks(4140),
                            Name = "Hip-Hop",
                            UpdatedAt = new DateTime(2023, 6, 21, 17, 22, 48, 703, DateTimeKind.Local).AddTicks(4141)
                        },
                        new
                        {
                            Id = 49,
                            CreatedAt = new DateTime(2023, 6, 21, 17, 22, 48, 703, DateTimeKind.Local).AddTicks(4141),
                            Name = "Rock",
                            UpdatedAt = new DateTime(2023, 6, 21, 17, 22, 48, 703, DateTimeKind.Local).AddTicks(4142)
                        },
                        new
                        {
                            Id = 50,
                            CreatedAt = new DateTime(2023, 6, 21, 17, 22, 48, 703, DateTimeKind.Local).AddTicks(4142),
                            Name = "Pop Culture",
                            UpdatedAt = new DateTime(2023, 6, 21, 17, 22, 48, 703, DateTimeKind.Local).AddTicks(4143)
                        },
                        new
                        {
                            Id = 51,
                            CreatedAt = new DateTime(2023, 6, 21, 17, 22, 48, 703, DateTimeKind.Local).AddTicks(4144),
                            Name = "Fitness Motivation",
                            UpdatedAt = new DateTime(2023, 6, 21, 17, 22, 48, 703, DateTimeKind.Local).AddTicks(4144)
                        },
                        new
                        {
                            Id = 52,
                            CreatedAt = new DateTime(2023, 6, 21, 17, 22, 48, 703, DateTimeKind.Local).AddTicks(4145),
                            Name = "Nutrition",
                            UpdatedAt = new DateTime(2023, 6, 21, 17, 22, 48, 703, DateTimeKind.Local).AddTicks(4145)
                        },
                        new
                        {
                            Id = 53,
                            CreatedAt = new DateTime(2023, 6, 21, 17, 22, 48, 703, DateTimeKind.Local).AddTicks(4146),
                            Name = "Weightlifting",
                            UpdatedAt = new DateTime(2023, 6, 21, 17, 22, 48, 703, DateTimeKind.Local).AddTicks(4146)
                        },
                        new
                        {
                            Id = 54,
                            CreatedAt = new DateTime(2023, 6, 21, 17, 22, 48, 703, DateTimeKind.Local).AddTicks(4147),
                            Name = "Yoga",
                            UpdatedAt = new DateTime(2023, 6, 21, 17, 22, 48, 703, DateTimeKind.Local).AddTicks(4147)
                        },
                        new
                        {
                            Id = 55,
                            CreatedAt = new DateTime(2023, 6, 21, 17, 22, 48, 703, DateTimeKind.Local).AddTicks(4148),
                            Name = "Running",
                            UpdatedAt = new DateTime(2023, 6, 21, 17, 22, 48, 703, DateTimeKind.Local).AddTicks(4148)
                        },
                        new
                        {
                            Id = 56,
                            CreatedAt = new DateTime(2023, 6, 21, 17, 22, 48, 703, DateTimeKind.Local).AddTicks(4149),
                            Name = "Cycling",
                            UpdatedAt = new DateTime(2023, 6, 21, 17, 22, 48, 703, DateTimeKind.Local).AddTicks(4150)
                        },
                        new
                        {
                            Id = 57,
                            CreatedAt = new DateTime(2023, 6, 21, 17, 22, 48, 703, DateTimeKind.Local).AddTicks(4150),
                            Name = "CrossFit",
                            UpdatedAt = new DateTime(2023, 6, 21, 17, 22, 48, 703, DateTimeKind.Local).AddTicks(4151)
                        },
                        new
                        {
                            Id = 58,
                            CreatedAt = new DateTime(2023, 6, 21, 17, 22, 48, 703, DateTimeKind.Local).AddTicks(4152),
                            Name = "Bodybuilding",
                            UpdatedAt = new DateTime(2023, 6, 21, 17, 22, 48, 703, DateTimeKind.Local).AddTicks(4152)
                        },
                        new
                        {
                            Id = 59,
                            CreatedAt = new DateTime(2023, 6, 21, 17, 22, 48, 703, DateTimeKind.Local).AddTicks(4153),
                            Name = "Productivity",
                            UpdatedAt = new DateTime(2023, 6, 21, 17, 22, 48, 703, DateTimeKind.Local).AddTicks(4153)
                        },
                        new
                        {
                            Id = 60,
                            CreatedAt = new DateTime(2023, 6, 21, 17, 22, 48, 703, DateTimeKind.Local).AddTicks(4155),
                            Name = "Self-improvement",
                            UpdatedAt = new DateTime(2023, 6, 21, 17, 22, 48, 703, DateTimeKind.Local).AddTicks(4155)
                        },
                        new
                        {
                            Id = 61,
                            CreatedAt = new DateTime(2023, 6, 21, 17, 22, 48, 703, DateTimeKind.Local).AddTicks(4156),
                            Name = "Meditation",
                            UpdatedAt = new DateTime(2023, 6, 21, 17, 22, 48, 703, DateTimeKind.Local).AddTicks(4156)
                        },
                        new
                        {
                            Id = 62,
                            CreatedAt = new DateTime(2023, 6, 21, 17, 22, 48, 703, DateTimeKind.Local).AddTicks(4168),
                            Name = "Mindfulness",
                            UpdatedAt = new DateTime(2023, 6, 21, 17, 22, 48, 703, DateTimeKind.Local).AddTicks(4171)
                        },
                        new
                        {
                            Id = 63,
                            CreatedAt = new DateTime(2023, 6, 21, 17, 22, 48, 703, DateTimeKind.Local).AddTicks(4171),
                            Name = "Motivation",
                            UpdatedAt = new DateTime(2023, 6, 21, 17, 22, 48, 703, DateTimeKind.Local).AddTicks(4172)
                        },
                        new
                        {
                            Id = 64,
                            CreatedAt = new DateTime(2023, 6, 21, 17, 22, 48, 703, DateTimeKind.Local).AddTicks(4172),
                            Name = "Self-care",
                            UpdatedAt = new DateTime(2023, 6, 21, 17, 22, 48, 703, DateTimeKind.Local).AddTicks(4173)
                        },
                        new
                        {
                            Id = 65,
                            CreatedAt = new DateTime(2023, 6, 21, 17, 22, 48, 703, DateTimeKind.Local).AddTicks(4174),
                            Name = "Cooking",
                            UpdatedAt = new DateTime(2023, 6, 21, 17, 22, 48, 703, DateTimeKind.Local).AddTicks(4174)
                        },
                        new
                        {
                            Id = 66,
                            CreatedAt = new DateTime(2023, 6, 21, 17, 22, 48, 703, DateTimeKind.Local).AddTicks(4176),
                            Name = "Baking",
                            UpdatedAt = new DateTime(2023, 6, 21, 17, 22, 48, 703, DateTimeKind.Local).AddTicks(4176)
                        },
                        new
                        {
                            Id = 67,
                            CreatedAt = new DateTime(2023, 6, 21, 17, 22, 48, 703, DateTimeKind.Local).AddTicks(4177),
                            Name = "Grilling",
                            UpdatedAt = new DateTime(2023, 6, 21, 17, 22, 48, 703, DateTimeKind.Local).AddTicks(4177)
                        },
                        new
                        {
                            Id = 68,
                            CreatedAt = new DateTime(2023, 6, 21, 17, 22, 48, 703, DateTimeKind.Local).AddTicks(4178),
                            Name = "Veganism",
                            UpdatedAt = new DateTime(2023, 6, 21, 17, 22, 48, 703, DateTimeKind.Local).AddTicks(4178)
                        },
                        new
                        {
                            Id = 69,
                            CreatedAt = new DateTime(2023, 6, 21, 17, 22, 48, 703, DateTimeKind.Local).AddTicks(4179),
                            Name = "Vegetarianism",
                            UpdatedAt = new DateTime(2023, 6, 21, 17, 22, 48, 703, DateTimeKind.Local).AddTicks(4179)
                        },
                        new
                        {
                            Id = 70,
                            CreatedAt = new DateTime(2023, 6, 21, 17, 22, 48, 703, DateTimeKind.Local).AddTicks(4180),
                            Name = "Meal Prep",
                            UpdatedAt = new DateTime(2023, 6, 21, 17, 22, 48, 703, DateTimeKind.Local).AddTicks(4181)
                        },
                        new
                        {
                            Id = 71,
                            CreatedAt = new DateTime(2023, 6, 21, 17, 22, 48, 703, DateTimeKind.Local).AddTicks(4181),
                            Name = "Gardening",
                            UpdatedAt = new DateTime(2023, 6, 21, 17, 22, 48, 703, DateTimeKind.Local).AddTicks(4182)
                        },
                        new
                        {
                            Id = 72,
                            CreatedAt = new DateTime(2023, 6, 21, 17, 22, 48, 703, DateTimeKind.Local).AddTicks(4182),
                            Name = "Home Improvement",
                            UpdatedAt = new DateTime(2023, 6, 21, 17, 22, 48, 703, DateTimeKind.Local).AddTicks(4183)
                        },
                        new
                        {
                            Id = 73,
                            CreatedAt = new DateTime(2023, 6, 21, 17, 22, 48, 703, DateTimeKind.Local).AddTicks(4184),
                            Name = "Interior Design",
                            UpdatedAt = new DateTime(2023, 6, 21, 17, 22, 48, 703, DateTimeKind.Local).AddTicks(4184)
                        },
                        new
                        {
                            Id = 74,
                            CreatedAt = new DateTime(2023, 6, 21, 17, 22, 48, 703, DateTimeKind.Local).AddTicks(4185),
                            Name = "Real Estate",
                            UpdatedAt = new DateTime(2023, 6, 21, 17, 22, 48, 703, DateTimeKind.Local).AddTicks(4185)
                        },
                        new
                        {
                            Id = 75,
                            CreatedAt = new DateTime(2023, 6, 21, 17, 22, 48, 703, DateTimeKind.Local).AddTicks(4186),
                            Name = "Personal Finance Tips",
                            UpdatedAt = new DateTime(2023, 6, 21, 17, 22, 48, 703, DateTimeKind.Local).AddTicks(4186)
                        },
                        new
                        {
                            Id = 76,
                            CreatedAt = new DateTime(2023, 6, 21, 17, 22, 48, 703, DateTimeKind.Local).AddTicks(4187),
                            Name = "Investing",
                            UpdatedAt = new DateTime(2023, 6, 21, 17, 22, 48, 703, DateTimeKind.Local).AddTicks(4187)
                        },
                        new
                        {
                            Id = 77,
                            CreatedAt = new DateTime(2023, 6, 21, 17, 22, 48, 703, DateTimeKind.Local).AddTicks(4188),
                            Name = "Stock Market",
                            UpdatedAt = new DateTime(2023, 6, 21, 17, 22, 48, 703, DateTimeKind.Local).AddTicks(4188)
                        },
                        new
                        {
                            Id = 78,
                            CreatedAt = new DateTime(2023, 6, 21, 17, 22, 48, 703, DateTimeKind.Local).AddTicks(4189),
                            Name = "Cryptocurrency Trading",
                            UpdatedAt = new DateTime(2023, 6, 21, 17, 22, 48, 703, DateTimeKind.Local).AddTicks(4189)
                        },
                        new
                        {
                            Id = 79,
                            CreatedAt = new DateTime(2023, 6, 21, 17, 22, 48, 703, DateTimeKind.Local).AddTicks(4190),
                            Name = "Entrepreneur Stories",
                            UpdatedAt = new DateTime(2023, 6, 21, 17, 22, 48, 703, DateTimeKind.Local).AddTicks(4190)
                        },
                        new
                        {
                            Id = 80,
                            CreatedAt = new DateTime(2023, 6, 21, 17, 22, 48, 703, DateTimeKind.Local).AddTicks(4192),
                            Name = "Startups",
                            UpdatedAt = new DateTime(2023, 6, 21, 17, 22, 48, 703, DateTimeKind.Local).AddTicks(4192)
                        },
                        new
                        {
                            Id = 81,
                            CreatedAt = new DateTime(2023, 6, 21, 17, 22, 48, 703, DateTimeKind.Local).AddTicks(4193),
                            Name = "Small Business",
                            UpdatedAt = new DateTime(2023, 6, 21, 17, 22, 48, 703, DateTimeKind.Local).AddTicks(4193)
                        },
                        new
                        {
                            Id = 82,
                            CreatedAt = new DateTime(2023, 6, 21, 17, 22, 48, 703, DateTimeKind.Local).AddTicks(4214),
                            Name = "Marketing",
                            UpdatedAt = new DateTime(2023, 6, 21, 17, 22, 48, 703, DateTimeKind.Local).AddTicks(4214)
                        },
                        new
                        {
                            Id = 83,
                            CreatedAt = new DateTime(2023, 6, 21, 17, 22, 48, 703, DateTimeKind.Local).AddTicks(4215),
                            Name = "Social Media",
                            UpdatedAt = new DateTime(2023, 6, 21, 17, 22, 48, 703, DateTimeKind.Local).AddTicks(4216)
                        },
                        new
                        {
                            Id = 84,
                            CreatedAt = new DateTime(2023, 6, 21, 17, 22, 48, 703, DateTimeKind.Local).AddTicks(4217),
                            Name = "Podcasts",
                            UpdatedAt = new DateTime(2023, 6, 21, 17, 22, 48, 703, DateTimeKind.Local).AddTicks(4217)
                        },
                        new
                        {
                            Id = 85,
                            CreatedAt = new DateTime(2023, 6, 21, 17, 22, 48, 703, DateTimeKind.Local).AddTicks(4218),
                            Name = "Writing Prompts",
                            UpdatedAt = new DateTime(2023, 6, 21, 17, 22, 48, 703, DateTimeKind.Local).AddTicks(4218)
                        },
                        new
                        {
                            Id = 86,
                            CreatedAt = new DateTime(2023, 6, 21, 17, 22, 48, 703, DateTimeKind.Local).AddTicks(4219),
                            Name = "Fantasy",
                            UpdatedAt = new DateTime(2023, 6, 21, 17, 22, 48, 703, DateTimeKind.Local).AddTicks(4219)
                        },
                        new
                        {
                            Id = 87,
                            CreatedAt = new DateTime(2023, 6, 21, 17, 22, 48, 703, DateTimeKind.Local).AddTicks(4220),
                            Name = "Science Fiction",
                            UpdatedAt = new DateTime(2023, 6, 21, 17, 22, 48, 703, DateTimeKind.Local).AddTicks(4220)
                        },
                        new
                        {
                            Id = 88,
                            CreatedAt = new DateTime(2023, 6, 21, 17, 22, 48, 703, DateTimeKind.Local).AddTicks(4221),
                            Name = "Horror",
                            UpdatedAt = new DateTime(2023, 6, 21, 17, 22, 48, 703, DateTimeKind.Local).AddTicks(4222)
                        },
                        new
                        {
                            Id = 89,
                            CreatedAt = new DateTime(2023, 6, 21, 17, 22, 48, 703, DateTimeKind.Local).AddTicks(4222),
                            Name = "Thrillers",
                            UpdatedAt = new DateTime(2023, 6, 21, 17, 22, 48, 703, DateTimeKind.Local).AddTicks(4223)
                        },
                        new
                        {
                            Id = 90,
                            CreatedAt = new DateTime(2023, 6, 21, 17, 22, 48, 703, DateTimeKind.Local).AddTicks(4224),
                            Name = "True Crime",
                            UpdatedAt = new DateTime(2023, 6, 21, 17, 22, 48, 703, DateTimeKind.Local).AddTicks(4224)
                        },
                        new
                        {
                            Id = 91,
                            CreatedAt = new DateTime(2023, 6, 21, 17, 22, 48, 703, DateTimeKind.Local).AddTicks(4225),
                            Name = "Paranormal",
                            UpdatedAt = new DateTime(2023, 6, 21, 17, 22, 48, 703, DateTimeKind.Local).AddTicks(4225)
                        },
                        new
                        {
                            Id = 92,
                            CreatedAt = new DateTime(2023, 6, 21, 17, 22, 48, 703, DateTimeKind.Local).AddTicks(4226),
                            Name = "Comics",
                            UpdatedAt = new DateTime(2023, 6, 21, 17, 22, 48, 703, DateTimeKind.Local).AddTicks(4226)
                        },
                        new
                        {
                            Id = 93,
                            CreatedAt = new DateTime(2023, 6, 21, 17, 22, 48, 703, DateTimeKind.Local).AddTicks(4227),
                            Name = "Anime",
                            UpdatedAt = new DateTime(2023, 6, 21, 17, 22, 48, 703, DateTimeKind.Local).AddTicks(4227)
                        },
                        new
                        {
                            Id = 94,
                            CreatedAt = new DateTime(2023, 6, 21, 17, 22, 48, 703, DateTimeKind.Local).AddTicks(4228),
                            Name = "Manga",
                            UpdatedAt = new DateTime(2023, 6, 21, 17, 22, 48, 703, DateTimeKind.Local).AddTicks(4228)
                        },
                        new
                        {
                            Id = 95,
                            CreatedAt = new DateTime(2023, 6, 21, 17, 22, 48, 703, DateTimeKind.Local).AddTicks(4229),
                            Name = "Board Games",
                            UpdatedAt = new DateTime(2023, 6, 21, 17, 22, 48, 703, DateTimeKind.Local).AddTicks(4229)
                        },
                        new
                        {
                            Id = 96,
                            CreatedAt = new DateTime(2023, 6, 21, 17, 22, 48, 703, DateTimeKind.Local).AddTicks(4230),
                            Name = "Card Games",
                            UpdatedAt = new DateTime(2023, 6, 21, 17, 22, 48, 703, DateTimeKind.Local).AddTicks(4230)
                        },
                        new
                        {
                            Id = 97,
                            CreatedAt = new DateTime(2023, 6, 21, 17, 22, 48, 703, DateTimeKind.Local).AddTicks(4231),
                            Name = "Tabletop RPGs",
                            UpdatedAt = new DateTime(2023, 6, 21, 17, 22, 48, 703, DateTimeKind.Local).AddTicks(4232)
                        },
                        new
                        {
                            Id = 98,
                            CreatedAt = new DateTime(2023, 6, 21, 17, 22, 48, 703, DateTimeKind.Local).AddTicks(4232),
                            Name = "Travel Photography",
                            UpdatedAt = new DateTime(2023, 6, 21, 17, 22, 48, 703, DateTimeKind.Local).AddTicks(4233)
                        },
                        new
                        {
                            Id = 99,
                            CreatedAt = new DateTime(2023, 6, 21, 17, 22, 48, 703, DateTimeKind.Local).AddTicks(4233),
                            Name = "Outdoor Adventures",
                            UpdatedAt = new DateTime(2023, 6, 21, 17, 22, 48, 703, DateTimeKind.Local).AddTicks(4234)
                        },
                        new
                        {
                            Id = 100,
                            CreatedAt = new DateTime(2023, 6, 21, 17, 22, 48, 703, DateTimeKind.Local).AddTicks(4235),
                            Name = "Celebrities",
                            UpdatedAt = new DateTime(2023, 6, 21, 17, 22, 48, 703, DateTimeKind.Local).AddTicks(4235)
                        });
                });

            modelBuilder.Entity("Screamer.Domain.Entities.ChatRoom", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasAnnotation("Relational:JsonPropertyName", "createdAt");

                    b.Property<int?>("LatestMessageId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasAnnotation("Relational:JsonPropertyName", "updatedAt");

                    b.HasKey("Id");

                    b.HasIndex("LatestMessageId");

                    b.ToTable("ChatRooms");
                });

            modelBuilder.Entity("Screamer.Domain.Entities.ChatRoomUser", b =>
                {
                    b.Property<int>("ChatroomId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasAnnotation("Relational:JsonPropertyName", "createdAt");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasAnnotation("Relational:JsonPropertyName", "updatedAt");

                    b.HasKey("ChatroomId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("ChatRoomUser");
                });

            modelBuilder.Entity("Screamer.Domain.Entities.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasAnnotation("Relational:JsonPropertyName", "createdAt");

                    b.Property<int?>("ParentCommentId")
                        .HasColumnType("int");

                    b.Property<int>("PostId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasAnnotation("Relational:JsonPropertyName", "updatedAt");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ParentCommentId");

                    b.HasIndex("PostId");

                    b.HasIndex("UserId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("Screamer.Domain.Entities.CommentHashtag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CommentId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasAnnotation("Relational:JsonPropertyName", "createdAt");

                    b.Property<int>("HashtagId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasAnnotation("Relational:JsonPropertyName", "updatedAt");

                    b.HasKey("Id");

                    b.HasIndex("CommentId");

                    b.HasIndex("HashtagId");

                    b.ToTable("CommentHashtags");
                });

            modelBuilder.Entity("Screamer.Domain.Entities.CommentMention", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CommentId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasAnnotation("Relational:JsonPropertyName", "createdAt");

                    b.Property<string>("PostTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasAnnotation("Relational:JsonPropertyName", "updatedAt");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CommentId");

                    b.HasIndex("UserId");

                    b.ToTable("CommentMentions");
                });

            modelBuilder.Entity("Screamer.Domain.Entities.CommentReaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CommentId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasAnnotation("Relational:JsonPropertyName", "createdAt");

                    b.Property<string>("ReactionType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasAnnotation("Relational:JsonPropertyName", "updatedAt");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CommentId");

                    b.HasIndex("UserId");

                    b.ToTable("CommentReactions");
                });

            modelBuilder.Entity("Screamer.Domain.Entities.Connection", b =>
                {
                    b.Property<string>("ConnectionId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("GroupName")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ConnectionId");

                    b.HasIndex("GroupName");

                    b.ToTable("Connections");
                });

            modelBuilder.Entity("Screamer.Domain.Entities.Cover", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasAnnotation("Relational:JsonPropertyName", "createdAt");

                    b.Property<bool>("IsMain")
                        .HasColumnType("bit");

                    b.Property<string>("PublicId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasAnnotation("Relational:JsonPropertyName", "updatedAt");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Cover");
                });

            modelBuilder.Entity("Screamer.Domain.Entities.Group", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Name");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("Screamer.Domain.Entities.Hashtag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasAnnotation("Relational:JsonPropertyName", "createdAt");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasAnnotation("Relational:JsonPropertyName", "updatedAt");

                    b.HasKey("Id");

                    b.ToTable("Hashtags");
                });

            modelBuilder.Entity("Screamer.Domain.Entities.Message", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()")
                        .HasAnnotation("Relational:JsonPropertyName", "createdAt");

                    b.Property<DateTime?>("DateRead")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("MessageSent")
                        .HasColumnType("datetime2");

                    b.Property<bool>("RecipientDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("RecipientId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RecipientUsername")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("SenderDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("SenderId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SenderUsername")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()")
                        .HasAnnotation("Relational:JsonPropertyName", "updatedAt");

                    b.HasKey("Id");

                    b.HasIndex("RecipientId");

                    b.HasIndex("SenderId");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("Screamer.Domain.Entities.Mood", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasAnnotation("Relational:JsonPropertyName", "createdAt");

                    b.Property<string>("MoodType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasAnnotation("Relational:JsonPropertyName", "updatedAt");

                    b.HasKey("Id");

                    b.ToTable("Moods");
                });

            modelBuilder.Entity("Screamer.Domain.Entities.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ChatRoomId")
                        .HasColumnType("int");

                    b.Property<int>("CommentId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasAnnotation("Relational:JsonPropertyName", "createdAt");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.Property<int>("MentionId")
                        .HasColumnType("int");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NotificationRoomId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PostId")
                        .HasColumnType("int");

                    b.Property<int>("ReactionId")
                        .HasColumnType("int");

                    b.Property<int>("ReplyId")
                        .HasColumnType("int");

                    b.Property<int>("TagId")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasAnnotation("Relational:JsonPropertyName", "updatedAt");

                    b.Property<string>("recieverId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("senderId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("userId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("Screamer.Domain.Entities.PostCategory", b =>
                {
                    b.Property<int>("PostId")
                        .HasColumnType("int");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasAnnotation("Relational:JsonPropertyName", "createdAt");

                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasAnnotation("Relational:JsonPropertyName", "updatedAt");

                    b.HasKey("PostId", "CategoryId");

                    b.HasIndex("CategoryId");

                    b.ToTable("PostCategories");
                });

            modelBuilder.Entity("Screamer.Domain.Entities.PostHashtag", b =>
                {
                    b.Property<int>("PostId")
                        .HasColumnType("int");

                    b.Property<int>("HashtagId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasAnnotation("Relational:JsonPropertyName", "createdAt");

                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasAnnotation("Relational:JsonPropertyName", "updatedAt");

                    b.HasKey("PostId", "HashtagId");

                    b.HasIndex("HashtagId");

                    b.ToTable("PostHashtags");
                });

            modelBuilder.Entity("Screamer.Domain.Entities.PostImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasAnnotation("Relational:JsonPropertyName", "createdAt");

                    b.Property<bool>("IsMain")
                        .HasColumnType("bit");

                    b.Property<int>("PostId")
                        .HasColumnType("int");

                    b.Property<string>("PublicId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasAnnotation("Relational:JsonPropertyName", "updatedAt");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PostId");

                    b.ToTable("PostImage");
                });

            modelBuilder.Entity("Screamer.Domain.Entities.PostMention", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasAnnotation("Relational:JsonPropertyName", "createdAt");

                    b.Property<int?>("PostId")
                        .HasColumnType("int");

                    b.Property<string>("PostTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasAnnotation("Relational:JsonPropertyName", "updatedAt");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("PostId");

                    b.HasIndex("UserId");

                    b.ToTable("PostMentions");
                });

            modelBuilder.Entity("Screamer.Domain.Entities.PostReaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasAnnotation("Relational:JsonPropertyName", "createdAt");

                    b.Property<int>("PostId")
                        .HasColumnType("int");

                    b.Property<string>("ReactionType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasAnnotation("Relational:JsonPropertyName", "updatedAt");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("PostId");

                    b.HasIndex("UserId");

                    b.ToTable("PostReactions");
                });

            modelBuilder.Entity("Screamer.Domain.Entities.Social", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasAnnotation("Relational:JsonPropertyName", "createdAt");

                    b.Property<string>("Discord")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Facebook")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Github")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Instagram")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Linkedin")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Medium")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Onlyfans")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Patreon")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Pinterest")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Reddit")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Signal")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Skype")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Slack")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Snapchat")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Telegram")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Tiktok")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Tumblr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Twitch")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Twitter")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasAnnotation("Relational:JsonPropertyName", "updatedAt");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Viber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Wechat")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Whatsapp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Youtube")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasFilter("[UserId] IS NOT NULL");

                    b.ToTable("Social");
                });

            modelBuilder.Entity("Screamer.Domain.Entities.Story", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasAnnotation("Relational:JsonPropertyName", "createdAt");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StoryImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasAnnotation("Relational:JsonPropertyName", "updatedAt");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Views")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Storys");
                });

            modelBuilder.Entity("Screamer.Domain.Entities.StoryImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasAnnotation("Relational:JsonPropertyName", "createdAt");

                    b.Property<bool>("IsMain")
                        .HasColumnType("bit");

                    b.Property<string>("PublicId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasAnnotation("Relational:JsonPropertyName", "updatedAt");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("StoryId");

                    b.ToTable("StoryImage");
                });

            modelBuilder.Entity("Screamer.Domain.Entities.Tag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasAnnotation("Relational:JsonPropertyName", "createdAt");

                    b.Property<int>("PostId")
                        .HasColumnType("int");

                    b.Property<string>("PostTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasAnnotation("Relational:JsonPropertyName", "updatedAt");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("PostId");

                    b.HasIndex("UserId");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("Screamer.Domain.Follow", b =>
                {
                    b.Property<string>("SourceUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("TargetUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasAnnotation("Relational:JsonPropertyName", "createdAt");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasAnnotation("Relational:JsonPropertyName", "updatedAt");

                    b.HasKey("SourceUserId", "TargetUserId");

                    b.HasIndex("TargetUserId");

                    b.ToTable("Follows");
                });

            modelBuilder.Entity("Screamer.Identity.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("AvatarUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Bio")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Birthday")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CoverUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("ObjectID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Website")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "8e445865-a24d-4543-a6c6-9443d048cdb9",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ea816c68-b82b-4feb-bb80-cd3ce98cc6eb",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "admin@localhost.com",
                            EmailConfirmed = true,
                            FirstName = "System",
                            LastName = "Admin",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@LOCALHOST.COM",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAIAAYagAAAAEM7Hk44Ckl+kKlIMpuZCyfD6axnnxORqXd1Y5Avoe+JSXeDIBqBJ3PYYSv1VxsdOhg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "9751cffd-32aa-4752-b432-0ef0989505ac",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserName = "admin"
                        },
                        new
                        {
                            Id = "9e224968-33e4-4652-b7b7-8574d048cdb9",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "835cb55c-fd50-4b00-bdac-ed0e57fad387",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user@localhost.com",
                            EmailConfirmed = true,
                            FirstName = "System",
                            LastName = "User",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER@LOCALHOST.COM",
                            NormalizedUserName = "USER",
                            PasswordHash = "AQAAAAIAAYagAAAAEHgzd2OTKE01PhvdaMSdVa6fosLfYF46JaVneLA9vsuaVCcXiMtIl1sAOb+Wvk3JMQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "15abce76-fcc4-4114-be42-429844ce82c2",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserName = "user"
                        },
                        new
                        {
                            Id = "9e224968-33e4-4652-b7b7-agfddsr",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "289a8574-9ea2-423e-b675-aa29711e5ca4",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "mod@localhost.com",
                            EmailConfirmed = true,
                            FirstName = "System",
                            LastName = "Mod",
                            LockoutEnabled = false,
                            NormalizedEmail = "MOD@LOCALHOST.COM",
                            NormalizedUserName = "MOD",
                            PasswordHash = "AQAAAAIAAYagAAAAEJoJshGVMKUwCpHg+Pi7D5peiCB7Bdy3Hu06aAqWubtE8XokHilHhO5J9Ro/TaJqjg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ff2a0cb2-182a-4184-bc5c-d236e41c1f0f",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserName = "mod"
                        },
                        new
                        {
                            Id = "9e224968-33e4-4652-b7b7-ismailbentabett",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "90b1eae9-31ba-4c0d-bd2b-ee47dde69253",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "ismailbentabett@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Ismail",
                            LastName = "Bentabet",
                            LockoutEnabled = false,
                            NormalizedEmail = "ISMAILBENTABETT@GMAIL.COM",
                            NormalizedUserName = "ISMAILBENTABETT",
                            PasswordHash = "AQAAAAIAAYagAAAAECnj8RD+TOjBOwZZ5wadMtSmYWJGvDyAy1XssEELfa6gxl3fdTfnUB8x0jygE4O1ZQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "4a5aa324-2eb9-4f54-949e-79c90ee412a6",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserName = "ismailbentabett"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Screamer.Identity.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Screamer.Identity.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Screamer.Identity.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Screamer.Identity.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Screamer.Domain.Common.Avatar", b =>
                {
                    b.HasOne("Screamer.Identity.Models.ApplicationUser", "User")
                        .WithMany("Avatars")
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Screamer.Domain.Common.Post", b =>
                {
                    b.HasOne("Screamer.Domain.Entities.Mood", "Mood")
                        .WithMany("Posts")
                        .HasForeignKey("MoodId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Screamer.Identity.Models.ApplicationUser", "User")
                        .WithMany("Posts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Mood");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Screamer.Domain.Entities.Adress", b =>
                {
                    b.HasOne("Screamer.Identity.Models.ApplicationUser", "User")
                        .WithOne("Adress")
                        .HasForeignKey("Screamer.Domain.Entities.Adress", "UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Screamer.Domain.Entities.BookMark", b =>
                {
                    b.HasOne("Screamer.Domain.Common.Post", "Post")
                        .WithMany("BookMarks")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Screamer.Identity.Models.ApplicationUser", "User")
                        .WithMany("BookMarks")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Post");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Screamer.Domain.Entities.ChatRoom", b =>
                {
                    b.HasOne("Screamer.Domain.Entities.Message", "LatestMessage")
                        .WithMany()
                        .HasForeignKey("LatestMessageId");

                    b.Navigation("LatestMessage");
                });

            modelBuilder.Entity("Screamer.Domain.Entities.ChatRoomUser", b =>
                {
                    b.HasOne("Screamer.Domain.Entities.ChatRoom", "ChatRoom")
                        .WithMany("ChatRoomUsers")
                        .HasForeignKey("ChatroomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Screamer.Identity.Models.ApplicationUser", "User")
                        .WithMany("ChatRoomUsers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ChatRoom");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Screamer.Domain.Entities.Comment", b =>
                {
                    b.HasOne("Screamer.Domain.Entities.Comment", "ParentComment")
                        .WithMany("Replies")
                        .HasForeignKey("ParentCommentId");

                    b.HasOne("Screamer.Domain.Common.Post", "Post")
                        .WithMany("Comments")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Screamer.Identity.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("ParentComment");

                    b.Navigation("Post");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Screamer.Domain.Entities.CommentHashtag", b =>
                {
                    b.HasOne("Screamer.Domain.Entities.Comment", "Comment")
                        .WithMany("CommentHashtags")
                        .HasForeignKey("CommentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Screamer.Domain.Entities.Hashtag", "Hashtag")
                        .WithMany("CommentHashtags")
                        .HasForeignKey("HashtagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Comment");

                    b.Navigation("Hashtag");
                });

            modelBuilder.Entity("Screamer.Domain.Entities.CommentMention", b =>
                {
                    b.HasOne("Screamer.Domain.Entities.Comment", "Comment")
                        .WithMany("Mentions")
                        .HasForeignKey("CommentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Screamer.Identity.Models.ApplicationUser", "User")
                        .WithMany("CommentMentions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Comment");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Screamer.Domain.Entities.CommentReaction", b =>
                {
                    b.HasOne("Screamer.Domain.Entities.Comment", "Comment")
                        .WithMany("Reactions")
                        .HasForeignKey("CommentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Screamer.Identity.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Comment");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Screamer.Domain.Entities.Connection", b =>
                {
                    b.HasOne("Screamer.Domain.Entities.Group", null)
                        .WithMany("Connections")
                        .HasForeignKey("GroupName");
                });

            modelBuilder.Entity("Screamer.Domain.Entities.Cover", b =>
                {
                    b.HasOne("Screamer.Identity.Models.ApplicationUser", "User")
                        .WithMany("Covers")
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Screamer.Domain.Entities.Message", b =>
                {
                    b.HasOne("Screamer.Identity.Models.ApplicationUser", "Recipient")
                        .WithMany("MessagesReceived")
                        .HasForeignKey("RecipientId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Screamer.Identity.Models.ApplicationUser", "Sender")
                        .WithMany("MessagesSent")
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Recipient");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("Screamer.Domain.Entities.PostCategory", b =>
                {
                    b.HasOne("Screamer.Domain.Entities.Category", "Category")
                        .WithMany("PostCategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Screamer.Domain.Common.Post", "Post")
                        .WithMany("PostCategories")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Post");
                });

            modelBuilder.Entity("Screamer.Domain.Entities.PostHashtag", b =>
                {
                    b.HasOne("Screamer.Domain.Entities.Hashtag", "Hashtag")
                        .WithMany("PostHashtags")
                        .HasForeignKey("HashtagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Screamer.Domain.Common.Post", "Post")
                        .WithMany("PostHashtags")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Hashtag");

                    b.Navigation("Post");
                });

            modelBuilder.Entity("Screamer.Domain.Entities.PostImage", b =>
                {
                    b.HasOne("Screamer.Domain.Common.Post", "Post")
                        .WithMany("PostImages")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Post");
                });

            modelBuilder.Entity("Screamer.Domain.Entities.PostMention", b =>
                {
                    b.HasOne("Screamer.Domain.Common.Post", "Post")
                        .WithMany("Mentions")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Screamer.Identity.Models.ApplicationUser", "User")
                        .WithMany("PostMentions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Post");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Screamer.Domain.Entities.PostReaction", b =>
                {
                    b.HasOne("Screamer.Domain.Common.Post", "Post")
                        .WithMany("Reactions")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Screamer.Identity.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Post");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Screamer.Domain.Entities.Social", b =>
                {
                    b.HasOne("Screamer.Identity.Models.ApplicationUser", "User")
                        .WithOne("Socials")
                        .HasForeignKey("Screamer.Domain.Entities.Social", "UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Screamer.Domain.Entities.Story", b =>
                {
                    b.HasOne("Screamer.Identity.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Screamer.Domain.Entities.StoryImage", b =>
                {
                    b.HasOne("Screamer.Domain.Entities.Story", "Story")
                        .WithMany("StoryImages")
                        .HasForeignKey("StoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Story");
                });

            modelBuilder.Entity("Screamer.Domain.Entities.Tag", b =>
                {
                    b.HasOne("Screamer.Domain.Common.Post", "Post")
                        .WithMany("Tags")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Screamer.Identity.Models.ApplicationUser", "User")
                        .WithMany("Tags")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Post");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Screamer.Domain.Follow", b =>
                {
                    b.HasOne("Screamer.Identity.Models.ApplicationUser", "SourceUser")
                        .WithMany("Following")
                        .HasForeignKey("SourceUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Screamer.Identity.Models.ApplicationUser", "TargetUser")
                        .WithMany("Followers")
                        .HasForeignKey("TargetUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("SourceUser");

                    b.Navigation("TargetUser");
                });

            modelBuilder.Entity("Screamer.Domain.Common.Post", b =>
                {
                    b.Navigation("BookMarks");

                    b.Navigation("Comments");

                    b.Navigation("Mentions");

                    b.Navigation("PostCategories");

                    b.Navigation("PostHashtags");

                    b.Navigation("PostImages");

                    b.Navigation("Reactions");

                    b.Navigation("Tags");
                });

            modelBuilder.Entity("Screamer.Domain.Entities.Category", b =>
                {
                    b.Navigation("PostCategories");
                });

            modelBuilder.Entity("Screamer.Domain.Entities.ChatRoom", b =>
                {
                    b.Navigation("ChatRoomUsers");
                });

            modelBuilder.Entity("Screamer.Domain.Entities.Comment", b =>
                {
                    b.Navigation("CommentHashtags");

                    b.Navigation("Mentions");

                    b.Navigation("Reactions");

                    b.Navigation("Replies");
                });

            modelBuilder.Entity("Screamer.Domain.Entities.Group", b =>
                {
                    b.Navigation("Connections");
                });

            modelBuilder.Entity("Screamer.Domain.Entities.Hashtag", b =>
                {
                    b.Navigation("CommentHashtags");

                    b.Navigation("PostHashtags");
                });

            modelBuilder.Entity("Screamer.Domain.Entities.Mood", b =>
                {
                    b.Navigation("Posts");
                });

            modelBuilder.Entity("Screamer.Domain.Entities.Story", b =>
                {
                    b.Navigation("StoryImages");
                });

            modelBuilder.Entity("Screamer.Identity.Models.ApplicationUser", b =>
                {
                    b.Navigation("Adress");

                    b.Navigation("Avatars");

                    b.Navigation("BookMarks");

                    b.Navigation("ChatRoomUsers");

                    b.Navigation("CommentMentions");

                    b.Navigation("Covers");

                    b.Navigation("Followers");

                    b.Navigation("Following");

                    b.Navigation("MessagesReceived");

                    b.Navigation("MessagesSent");

                    b.Navigation("PostMentions");

                    b.Navigation("Posts");

                    b.Navigation("Socials");

                    b.Navigation("Tags");
                });
#pragma warning restore 612, 618
        }
    }
}
