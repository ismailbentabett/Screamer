// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Screamer.Presistance.DatabaseContext;

#nullable disable

namespace Screamer.Presistance.Migrations
{
    [DbContext(typeof(ScreamerDbContext))]
    partial class ScreamerDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "cac43a6e-f7bb-4448-baaf-1add431ccbbf",
                            Name = "Moderator",
                            NormalizedName = "MODERATOR"
                        },
                        new
                        {
                            Id = "cbc43a8e-f7bb-4445-baaf-1add431ffbbf",
                            Name = "Administrator",
                            NormalizedName = "ADMINISTRATOR"
                        },
                        new
                        {
                            Id = "dbc43a8e-f7bb-4445-baaf-1999999999",
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "8e445865-a24d-4543-a6c6-9443d048cdb9",
                            RoleId = "cbc43a8e-f7bb-4445-baaf-1add431ffbbf"
                        },
                        new
                        {
                            UserId = "9e224968-33e4-4652-b7b7-8574d048cdb9",
                            RoleId = "cac43a6e-f7bb-4448-baaf-1add431ccbbf"
                        },
                        new
                        {
                            UserId = "9e224968-33e4-4652-b7b7-agfddsr",
                            RoleId = "dbc43a8e-f7bb-4445-baaf-1999999999"
                        },
                        new
                        {
                            UserId = "9e224968-33e4-4652-b7b7-ismailbentabett",
                            RoleId = "cbc43a8e-f7bb-4445-baaf-1add431ffbbf"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Screamer.Domain.Common.Avatar", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasAnnotation("Relational:JsonPropertyName", "createdAt");

                    b.Property<bool>("IsMain")
                        .HasColumnType("bit");

                    b.Property<string>("PublicId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasAnnotation("Relational:JsonPropertyName", "updatedAt");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Avatar");
                });

            modelBuilder.Entity("Screamer.Domain.Common.Post", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()")
                        .HasAnnotation("Relational:JsonPropertyName", "createdAt");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MoodId")
                        .HasColumnType("int");

                    b.Property<string>("ObjectID")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "objectID");

                    b.Property<string>("PostImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()")
                        .HasAnnotation("Relational:JsonPropertyName", "updatedAt");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Views")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MoodId");

                    b.HasIndex("UserId");

                    b.ToTable("Posts");
                });

            modelBuilder.Entity("Screamer.Domain.Entities.Adress", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasAnnotation("Relational:JsonPropertyName", "createdAt");

                    b.Property<string>("PostalCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("State")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Street")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasAnnotation("Relational:JsonPropertyName", "updatedAt");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasFilter("[UserId] IS NOT NULL");

                    b.ToTable("Adress");
                });

            modelBuilder.Entity("Screamer.Domain.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasAnnotation("Relational:JsonPropertyName", "createdAt");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasAnnotation("Relational:JsonPropertyName", "updatedAt");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2023, 6, 4, 14, 19, 42, 775, DateTimeKind.Local).AddTicks(3334),
                            Name = "News",
                            UpdatedAt = new DateTime(2023, 6, 4, 14, 19, 42, 775, DateTimeKind.Local).AddTicks(3346)
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2023, 6, 4, 14, 19, 42, 775, DateTimeKind.Local).AddTicks(3351),
                            Name = "Politics",
                            UpdatedAt = new DateTime(2023, 6, 4, 14, 19, 42, 775, DateTimeKind.Local).AddTicks(3351)
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2023, 6, 4, 14, 19, 42, 775, DateTimeKind.Local).AddTicks(3353),
                            Name = "Science",
                            UpdatedAt = new DateTime(2023, 6, 4, 14, 19, 42, 775, DateTimeKind.Local).AddTicks(3353)
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2023, 6, 4, 14, 19, 42, 775, DateTimeKind.Local).AddTicks(3354),
                            Name = "Technology",
                            UpdatedAt = new DateTime(2023, 6, 4, 14, 19, 42, 775, DateTimeKind.Local).AddTicks(3355)
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2023, 6, 4, 14, 19, 42, 775, DateTimeKind.Local).AddTicks(3356),
                            Name = "Gaming",
                            UpdatedAt = new DateTime(2023, 6, 4, 14, 19, 42, 775, DateTimeKind.Local).AddTicks(3356)
                        },
                        new
                        {
                            Id = 6,
                            CreatedAt = new DateTime(2023, 6, 4, 14, 19, 42, 775, DateTimeKind.Local).AddTicks(3358),
                            Name = "Sports",
                            UpdatedAt = new DateTime(2023, 6, 4, 14, 19, 42, 775, DateTimeKind.Local).AddTicks(3359)
                        },
                        new
                        {
                            Id = 7,
                            CreatedAt = new DateTime(2023, 6, 4, 14, 19, 42, 775, DateTimeKind.Local).AddTicks(3359),
                            Name = "Music",
                            UpdatedAt = new DateTime(2023, 6, 4, 14, 19, 42, 775, DateTimeKind.Local).AddTicks(3360)
                        },
                        new
                        {
                            Id = 8,
                            CreatedAt = new DateTime(2023, 6, 4, 14, 19, 42, 775, DateTimeKind.Local).AddTicks(3361),
                            Name = "Movies",
                            UpdatedAt = new DateTime(2023, 6, 4, 14, 19, 42, 775, DateTimeKind.Local).AddTicks(3361)
                        },
                        new
                        {
                            Id = 9,
                            CreatedAt = new DateTime(2023, 6, 4, 14, 19, 42, 775, DateTimeKind.Local).AddTicks(3362),
                            Name = "Television",
                            UpdatedAt = new DateTime(2023, 6, 4, 14, 19, 42, 775, DateTimeKind.Local).AddTicks(3362)
                        },
                        new
                        {
                            Id = 10,
                            CreatedAt = new DateTime(2023, 6, 4, 14, 19, 42, 775, DateTimeKind.Local).AddTicks(3364),
                            Name = "Books",
                            UpdatedAt = new DateTime(2023, 6, 4, 14, 19, 42, 775, DateTimeKind.Local).AddTicks(3364)
                        },
                        new
                        {
                            Id = 11,
                            CreatedAt = new DateTime(2023, 6, 4, 14, 19, 42, 775, DateTimeKind.Local).AddTicks(4566),
                            Name = "Art",
                            UpdatedAt = new DateTime(2023, 6, 4, 14, 19, 42, 775, DateTimeKind.Local).AddTicks(4568)
                        },
                        new
                        {
                            Id = 12,
                            CreatedAt = new DateTime(2023, 6, 4, 14, 19, 42, 775, DateTimeKind.Local).AddTicks(4570),
                            Name = "Food",
                            UpdatedAt = new DateTime(2023, 6, 4, 14, 19, 42, 775, DateTimeKind.Local).AddTicks(4570)
                        },
                        new
                        {
                            Id = 13,
                            CreatedAt = new DateTime(2023, 6, 4, 14, 19, 42, 775, DateTimeKind.Local).AddTicks(4572),
                            Name = "Travel",
                            UpdatedAt = new DateTime(2023, 6, 4, 14, 19, 42, 775, DateTimeKind.Local).AddTicks(4572)
                        },
                        new
                        {
                            Id = 14,
                            CreatedAt = new DateTime(2023, 6, 4, 14, 19, 42, 775, DateTimeKind.Local).AddTicks(4574),
                            Name = "Fitness",
                            UpdatedAt = new DateTime(2023, 6, 4, 14, 19, 42, 775, DateTimeKind.Local).AddTicks(4574)
                        },
                        new
                        {
                            Id = 15,
                            CreatedAt = new DateTime(2023, 6, 4, 14, 19, 42, 775, DateTimeKind.Local).AddTicks(4577),
                            Name = "Health",
                            UpdatedAt = new DateTime(2023, 6, 4, 14, 19, 42, 775, DateTimeKind.Local).AddTicks(4578)
                        },
                        new
                        {
                            Id = 16,
                            CreatedAt = new DateTime(2023, 6, 4, 14, 19, 42, 775, DateTimeKind.Local).AddTicks(4579),
                            Name = "Fashion",
                            UpdatedAt = new DateTime(2023, 6, 4, 14, 19, 42, 775, DateTimeKind.Local).AddTicks(4579)
                        },
                        new
                        {
                            Id = 17,
                            CreatedAt = new DateTime(2023, 6, 4, 14, 19, 42, 775, DateTimeKind.Local).AddTicks(4580),
                            Name = "Relationships",
                            UpdatedAt = new DateTime(2023, 6, 4, 14, 19, 42, 775, DateTimeKind.Local).AddTicks(4580)
                        },
                        new
                        {
                            Id = 18,
                            CreatedAt = new DateTime(2023, 6, 4, 14, 19, 42, 775, DateTimeKind.Local).AddTicks(4583),
                            Name = "Advice",
                            UpdatedAt = new DateTime(2023, 6, 4, 14, 19, 42, 775, DateTimeKind.Local).AddTicks(4584)
                        },
                        new
                        {
                            Id = 19,
                            CreatedAt = new DateTime(2023, 6, 4, 14, 19, 42, 775, DateTimeKind.Local).AddTicks(4585),
                            Name = "Writing",
                            UpdatedAt = new DateTime(2023, 6, 4, 14, 19, 42, 775, DateTimeKind.Local).AddTicks(4585)
                        },
                        new
                        {
                            Id = 20,
                            CreatedAt = new DateTime(2023, 6, 4, 14, 19, 42, 775, DateTimeKind.Local).AddTicks(4586),
                            Name = "Photography",
                            UpdatedAt = new DateTime(2023, 6, 4, 14, 19, 42, 775, DateTimeKind.Local).AddTicks(4586)
                        },
                        new
                        {
                            Id = 21,
                            CreatedAt = new DateTime(2023, 6, 4, 14, 19, 42, 775, DateTimeKind.Local).AddTicks(4587),
                            Name = "DIY (Do-It-Yourself)",
                            UpdatedAt = new DateTime(2023, 6, 4, 14, 19, 42, 775, DateTimeKind.Local).AddTicks(4587)
                        },
                        new
                        {
                            Id = 22,
                            CreatedAt = new DateTime(2023, 6, 4, 14, 19, 42, 775, DateTimeKind.Local).AddTicks(4588),
                            Name = "Nature",
                            UpdatedAt = new DateTime(2023, 6, 4, 14, 19, 42, 775, DateTimeKind.Local).AddTicks(4588)
                        },
                        new
                        {
                            Id = 23,
                            CreatedAt = new DateTime(2023, 6, 4, 14, 19, 42, 775, DateTimeKind.Local).AddTicks(4589),
                            Name = "Animals",
                            UpdatedAt = new DateTime(2023, 6, 4, 14, 19, 42, 775, DateTimeKind.Local).AddTicks(4589)
                        },
                        new
                        {
                            Id = 24,
                            CreatedAt = new DateTime(2023, 6, 4, 14, 19, 42, 775, DateTimeKind.Local).AddTicks(4590),
                            Name = "Memes",
                            UpdatedAt = new DateTime(2023, 6, 4, 14, 19, 42, 775, DateTimeKind.Local).AddTicks(4590)
                        },
                        new
                        {
                            Id = 25,
                            CreatedAt = new DateTime(2023, 6, 4, 14, 19, 42, 775, DateTimeKind.Local).AddTicks(4591),
                            Name = "Funny",
                            UpdatedAt = new DateTime(2023, 6, 4, 14, 19, 42, 775, DateTimeKind.Local).AddTicks(4592)
                        },
                        new
                        {
                            Id = 26,
                            CreatedAt = new DateTime(2023, 6, 4, 14, 19, 42, 775, DateTimeKind.Local).AddTicks(4592),
                            Name = "Jokes",
                            UpdatedAt = new DateTime(2023, 6, 4, 14, 19, 42, 775, DateTimeKind.Local).AddTicks(4593)
                        },
                        new
                        {
                            Id = 27,
                            CreatedAt = new DateTime(2023, 6, 4, 14, 19, 42, 775, DateTimeKind.Local).AddTicks(4593),
                            Name = "History",
                            UpdatedAt = new DateTime(2023, 6, 4, 14, 19, 42, 775, DateTimeKind.Local).AddTicks(4594)
                        },
                        new
                        {
                            Id = 28,
                            CreatedAt = new DateTime(2023, 6, 4, 14, 19, 42, 775, DateTimeKind.Local).AddTicks(4595),
                            Name = "Philosophy",
                            UpdatedAt = new DateTime(2023, 6, 4, 14, 19, 42, 775, DateTimeKind.Local).AddTicks(4595)
                        },
                        new
                        {
                            Id = 29,
                            CreatedAt = new DateTime(2023, 6, 4, 14, 19, 42, 775, DateTimeKind.Local).AddTicks(4596),
                            Name = "Psychology",
                            UpdatedAt = new DateTime(2023, 6, 4, 14, 19, 42, 775, DateTimeKind.Local).AddTicks(4596)
                        },
                        new
                        {
                            Id = 30,
                            CreatedAt = new DateTime(2023, 6, 4, 14, 19, 42, 775, DateTimeKind.Local).AddTicks(4597),
                            Name = "Education",
                            UpdatedAt = new DateTime(2023, 6, 4, 14, 19, 42, 775, DateTimeKind.Local).AddTicks(4597)
                        },
                        new
                        {
                            Id = 31,
                            CreatedAt = new DateTime(2023, 6, 4, 14, 19, 42, 775, DateTimeKind.Local).AddTicks(4598),
                            Name = "Career",
                            UpdatedAt = new DateTime(2023, 6, 4, 14, 19, 42, 775, DateTimeKind.Local).AddTicks(4598)
                        },
                        new
                        {
                            Id = 32,
                            CreatedAt = new DateTime(2023, 6, 4, 14, 19, 42, 775, DateTimeKind.Local).AddTicks(4599),
                            Name = "Personal Finance",
                            UpdatedAt = new DateTime(2023, 6, 4, 14, 19, 42, 775, DateTimeKind.Local).AddTicks(4600)
                        },
                        new
                        {
                            Id = 33,
                            CreatedAt = new DateTime(2023, 6, 4, 14, 19, 42, 775, DateTimeKind.Local).AddTicks(4600),
                            Name = "Entrepreneurship",
                            UpdatedAt = new DateTime(2023, 6, 4, 14, 19, 42, 775, DateTimeKind.Local).AddTicks(4601)
                        },
                        new
                        {
                            Id = 34,
                            CreatedAt = new DateTime(2023, 6, 4, 14, 19, 42, 775, DateTimeKind.Local).AddTicks(4603),
                            Name = "Parenting",
                            UpdatedAt = new DateTime(2023, 6, 4, 14, 19, 42, 775, DateTimeKind.Local).AddTicks(4603)
                        },
                        new
                        {
                            Id = 35,
                            CreatedAt = new DateTime(2023, 6, 4, 14, 19, 42, 775, DateTimeKind.Local).AddTicks(4604),
                            Name = "Relationships",
                            UpdatedAt = new DateTime(2023, 6, 4, 14, 19, 42, 775, DateTimeKind.Local).AddTicks(4604)
                        },
                        new
                        {
                            Id = 36,
                            CreatedAt = new DateTime(2023, 6, 4, 14, 19, 42, 775, DateTimeKind.Local).AddTicks(4605),
                            Name = "Technology News",
                            UpdatedAt = new DateTime(2023, 6, 4, 14, 19, 42, 775, DateTimeKind.Local).AddTicks(4605)
                        },
                        new
                        {
                            Id = 37,
                            CreatedAt = new DateTime(2023, 6, 4, 14, 19, 42, 775, DateTimeKind.Local).AddTicks(4606),
                            Name = "Programming",
                            UpdatedAt = new DateTime(2023, 6, 4, 14, 19, 42, 775, DateTimeKind.Local).AddTicks(4607)
                        },
                        new
                        {
                            Id = 38,
                            CreatedAt = new DateTime(2023, 6, 4, 14, 19, 42, 775, DateTimeKind.Local).AddTicks(4607),
                            Name = "Web Development",
                            UpdatedAt = new DateTime(2023, 6, 4, 14, 19, 42, 775, DateTimeKind.Local).AddTicks(4608)
                        },
                        new
                        {
                            Id = 39,
                            CreatedAt = new DateTime(2023, 6, 4, 14, 19, 42, 775, DateTimeKind.Local).AddTicks(4608),
                            Name = "Data Science",
                            UpdatedAt = new DateTime(2023, 6, 4, 14, 19, 42, 775, DateTimeKind.Local).AddTicks(4609)
                        },
                        new
                        {
                            Id = 40,
                            CreatedAt = new DateTime(2023, 6, 4, 14, 19, 42, 775, DateTimeKind.Local).AddTicks(4610),
                            Name = "Cryptocurrency",
                            UpdatedAt = new DateTime(2023, 6, 4, 14, 19, 42, 775, DateTimeKind.Local).AddTicks(4610)
                        },
                        new
                        {
                            Id = 41,
                            CreatedAt = new DateTime(2023, 6, 4, 14, 19, 42, 775, DateTimeKind.Local).AddTicks(4611),
                            Name = "Design",
                            UpdatedAt = new DateTime(2023, 6, 4, 14, 19, 42, 775, DateTimeKind.Local).AddTicks(4611)
                        },
                        new
                        {
                            Id = 42,
                            CreatedAt = new DateTime(2023, 6, 4, 14, 19, 42, 775, DateTimeKind.Local).AddTicks(4612),
                            Name = "Gaming News",
                            UpdatedAt = new DateTime(2023, 6, 4, 14, 19, 42, 775, DateTimeKind.Local).AddTicks(4612)
                        },
                        new
                        {
                            Id = 43,
                            CreatedAt = new DateTime(2023, 6, 4, 14, 19, 42, 775, DateTimeKind.Local).AddTicks(4613),
                            Name = "PC Gaming",
                            UpdatedAt = new DateTime(2023, 6, 4, 14, 19, 42, 775, DateTimeKind.Local).AddTicks(4613)
                        },
                        new
                        {
                            Id = 44,
                            CreatedAt = new DateTime(2023, 6, 4, 14, 19, 42, 775, DateTimeKind.Local).AddTicks(4614),
                            Name = "Console Gaming",
                            UpdatedAt = new DateTime(2023, 6, 4, 14, 19, 42, 775, DateTimeKind.Local).AddTicks(4614)
                        },
                        new
                        {
                            Id = 45,
                            CreatedAt = new DateTime(2023, 6, 4, 14, 19, 42, 775, DateTimeKind.Local).AddTicks(4615),
                            Name = "Mobile Gaming",
                            UpdatedAt = new DateTime(2023, 6, 4, 14, 19, 42, 775, DateTimeKind.Local).AddTicks(4615)
                        },
                        new
                        {
                            Id = 46,
                            CreatedAt = new DateTime(2023, 6, 4, 14, 19, 42, 775, DateTimeKind.Local).AddTicks(4616),
                            Name = "Esports",
                            UpdatedAt = new DateTime(2023, 6, 4, 14, 19, 42, 775, DateTimeKind.Local).AddTicks(4617)
                        },
                        new
                        {
                            Id = 47,
                            CreatedAt = new DateTime(2023, 6, 4, 14, 19, 42, 775, DateTimeKind.Local).AddTicks(4617),
                            Name = "Music News",
                            UpdatedAt = new DateTime(2023, 6, 4, 14, 19, 42, 775, DateTimeKind.Local).AddTicks(4618)
                        },
                        new
                        {
                            Id = 48,
                            CreatedAt = new DateTime(2023, 6, 4, 14, 19, 42, 775, DateTimeKind.Local).AddTicks(4618),
                            Name = "Hip-Hop",
                            UpdatedAt = new DateTime(2023, 6, 4, 14, 19, 42, 775, DateTimeKind.Local).AddTicks(4619)
                        },
                        new
                        {
                            Id = 49,
                            CreatedAt = new DateTime(2023, 6, 4, 14, 19, 42, 775, DateTimeKind.Local).AddTicks(4620),
                            Name = "Rock",
                            UpdatedAt = new DateTime(2023, 6, 4, 14, 19, 42, 775, DateTimeKind.Local).AddTicks(4620)
                        },
                        new
                        {
                            Id = 50,
                            CreatedAt = new DateTime(2023, 6, 4, 14, 19, 42, 775, DateTimeKind.Local).AddTicks(4621),
                            Name = "Pop Culture",
                            UpdatedAt = new DateTime(2023, 6, 4, 14, 19, 42, 775, DateTimeKind.Local).AddTicks(4621)
                        },
                        new
                        {
                            Id = 51,
                            CreatedAt = new DateTime(2023, 6, 4, 14, 19, 42, 775, DateTimeKind.Local).AddTicks(4622),
                            Name = "Fitness Motivation",
                            UpdatedAt = new DateTime(2023, 6, 4, 14, 19, 42, 775, DateTimeKind.Local).AddTicks(4622)
                        },
                        new
                        {
                            Id = 52,
                            CreatedAt = new DateTime(2023, 6, 4, 14, 19, 42, 775, DateTimeKind.Local).AddTicks(4623),
                            Name = "Nutrition",
                            UpdatedAt = new DateTime(2023, 6, 4, 14, 19, 42, 775, DateTimeKind.Local).AddTicks(4623)
                        },
                        new
                        {
                            Id = 53,
                            CreatedAt = new DateTime(2023, 6, 4, 14, 19, 42, 775, DateTimeKind.Local).AddTicks(4624),
                            Name = "Weightlifting",
                            UpdatedAt = new DateTime(2023, 6, 4, 14, 19, 42, 775, DateTimeKind.Local).AddTicks(4624)
                        },
                        new
                        {
                            Id = 54,
                            CreatedAt = new DateTime(2023, 6, 4, 14, 19, 42, 775, DateTimeKind.Local).AddTicks(4625),
                            Name = "Yoga",
                            UpdatedAt = new DateTime(2023, 6, 4, 14, 19, 42, 775, DateTimeKind.Local).AddTicks(4625)
                        },
                        new
                        {
                            Id = 55,
                            CreatedAt = new DateTime(2023, 6, 4, 14, 19, 42, 775, DateTimeKind.Local).AddTicks(4626),
                            Name = "Running",
                            UpdatedAt = new DateTime(2023, 6, 4, 14, 19, 42, 775, DateTimeKind.Local).AddTicks(4626)
                        },
                        new
                        {
                            Id = 56,
                            CreatedAt = new DateTime(2023, 6, 4, 14, 19, 42, 775, DateTimeKind.Local).AddTicks(4627),
                            Name = "Cycling",
                            UpdatedAt = new DateTime(2023, 6, 4, 14, 19, 42, 775, DateTimeKind.Local).AddTicks(4627)
                        },
                        new
                        {
                            Id = 57,
                            CreatedAt = new DateTime(2023, 6, 4, 14, 19, 42, 775, DateTimeKind.Local).AddTicks(4628),
                            Name = "CrossFit",
                            UpdatedAt = new DateTime(2023, 6, 4, 14, 19, 42, 775, DateTimeKind.Local).AddTicks(4629)
                        },
                        new
                        {
                            Id = 58,
                            CreatedAt = new DateTime(2023, 6, 4, 14, 19, 42, 775, DateTimeKind.Local).AddTicks(4629),
                            Name = "Bodybuilding",
                            UpdatedAt = new DateTime(2023, 6, 4, 14, 19, 42, 775, DateTimeKind.Local).AddTicks(4630)
                        },
                        new
                        {
                            Id = 59,
                            CreatedAt = new DateTime(2023, 6, 4, 14, 19, 42, 775, DateTimeKind.Local).AddTicks(4630),
                            Name = "Productivity",
                            UpdatedAt = new DateTime(2023, 6, 4, 14, 19, 42, 775, DateTimeKind.Local).AddTicks(4631)
                        },
                        new
                        {
                            Id = 60,
                            CreatedAt = new DateTime(2023, 6, 4, 14, 19, 42, 775, DateTimeKind.Local).AddTicks(4632),
                            Name = "Self-improvement",
                            UpdatedAt = new DateTime(2023, 6, 4, 14, 19, 42, 775, DateTimeKind.Local).AddTicks(4632)
                        },
                        new
                        {
                            Id = 61,
                            CreatedAt = new DateTime(2023, 6, 4, 14, 19, 42, 775, DateTimeKind.Local).AddTicks(4633),
                            Name = "Meditation",
                            UpdatedAt = new DateTime(2023, 6, 4, 14, 19, 42, 775, DateTimeKind.Local).AddTicks(4633)
                        },
                        new
                        {
                            Id = 62,
                            CreatedAt = new DateTime(2023, 6, 4, 14, 19, 42, 775, DateTimeKind.Local).AddTicks(4634),
                            Name = "Mindfulness",
                            UpdatedAt = new DateTime(2023, 6, 4, 14, 19, 42, 775, DateTimeKind.Local).AddTicks(4634)
                        },
                        new
                        {
                            Id = 63,
                            CreatedAt = new DateTime(2023, 6, 4, 14, 19, 42, 775, DateTimeKind.Local).AddTicks(4635),
                            Name = "Motivation",
                            UpdatedAt = new DateTime(2023, 6, 4, 14, 19, 42, 775, DateTimeKind.Local).AddTicks(4635)
                        },
                        new
                        {
                            Id = 64,
                            CreatedAt = new DateTime(2023, 6, 4, 14, 19, 42, 775, DateTimeKind.Local).AddTicks(4636),
                            Name = "Self-care",
                            UpdatedAt = new DateTime(2023, 6, 4, 14, 19, 42, 775, DateTimeKind.Local).AddTicks(4636)
                        },
                        new
                        {
                            Id = 65,
                            CreatedAt = new DateTime(2023, 6, 4, 14, 19, 42, 775, DateTimeKind.Local).AddTicks(4637),
                            Name = "Cooking",
                            UpdatedAt = new DateTime(2023, 6, 4, 14, 19, 42, 775, DateTimeKind.Local).AddTicks(4637)
                        },
                        new
                        {
                            Id = 66,
                            CreatedAt = new DateTime(2023, 6, 4, 14, 19, 42, 775, DateTimeKind.Local).AddTicks(4639),
                            Name = "Baking",
                            UpdatedAt = new DateTime(2023, 6, 4, 14, 19, 42, 775, DateTimeKind.Local).AddTicks(4639)
                        },
                        new
                        {
                            Id = 67,
                            CreatedAt = new DateTime(2023, 6, 4, 14, 19, 42, 775, DateTimeKind.Local).AddTicks(4640),
                            Name = "Grilling",
                            UpdatedAt = new DateTime(2023, 6, 4, 14, 19, 42, 775, DateTimeKind.Local).AddTicks(4640)
                        },
                        new
                        {
                            Id = 68,
                            CreatedAt = new DateTime(2023, 6, 4, 14, 19, 42, 775, DateTimeKind.Local).AddTicks(4641),
                            Name = "Veganism",
                            UpdatedAt = new DateTime(2023, 6, 4, 14, 19, 42, 775, DateTimeKind.Local).AddTicks(4641)
                        },
                        new
                        {
                            Id = 69,
                            CreatedAt = new DateTime(2023, 6, 4, 14, 19, 42, 775, DateTimeKind.Local).AddTicks(4643),
                            Name = "Vegetarianism",
                            UpdatedAt = new DateTime(2023, 6, 4, 14, 19, 42, 775, DateTimeKind.Local).AddTicks(4644)
                        },
                        new
                        {
                            Id = 70,
                            CreatedAt = new DateTime(2023, 6, 4, 14, 19, 42, 775, DateTimeKind.Local).AddTicks(4644),
                            Name = "Meal Prep",
                            UpdatedAt = new DateTime(2023, 6, 4, 14, 19, 42, 775, DateTimeKind.Local).AddTicks(4645)
                        },
                        new
                        {
                            Id = 71,
                            CreatedAt = new DateTime(2023, 6, 4, 14, 19, 42, 775, DateTimeKind.Local).AddTicks(4645),
                            Name = "Gardening",
                            UpdatedAt = new DateTime(2023, 6, 4, 14, 19, 42, 775, DateTimeKind.Local).AddTicks(4646)
                        },
                        new
                        {
                            Id = 72,
                            CreatedAt = new DateTime(2023, 6, 4, 14, 19, 42, 775, DateTimeKind.Local).AddTicks(4647),
                            Name = "Home Improvement",
                            UpdatedAt = new DateTime(2023, 6, 4, 14, 19, 42, 775, DateTimeKind.Local).AddTicks(4647)
                        },
                        new
                        {
                            Id = 73,
                            CreatedAt = new DateTime(2023, 6, 4, 14, 19, 42, 775, DateTimeKind.Local).AddTicks(4648),
                            Name = "Interior Design",
                            UpdatedAt = new DateTime(2023, 6, 4, 14, 19, 42, 775, DateTimeKind.Local).AddTicks(4648)
                        },
                        new
                        {
                            Id = 74,
                            CreatedAt = new DateTime(2023, 6, 4, 14, 19, 42, 775, DateTimeKind.Local).AddTicks(4649),
                            Name = "Real Estate",
                            UpdatedAt = new DateTime(2023, 6, 4, 14, 19, 42, 775, DateTimeKind.Local).AddTicks(4649)
                        },
                        new
                        {
                            Id = 75,
                            CreatedAt = new DateTime(2023, 6, 4, 14, 19, 42, 775, DateTimeKind.Local).AddTicks(4653),
                            Name = "Personal Finance Tips",
                            UpdatedAt = new DateTime(2023, 6, 4, 14, 19, 42, 775, DateTimeKind.Local).AddTicks(4654)
                        },
                        new
                        {
                            Id = 76,
                            CreatedAt = new DateTime(2023, 6, 4, 14, 19, 42, 775, DateTimeKind.Local).AddTicks(4654),
                            Name = "Investing",
                            UpdatedAt = new DateTime(2023, 6, 4, 14, 19, 42, 775, DateTimeKind.Local).AddTicks(4655)
                        },
                        new
                        {
                            Id = 77,
                            CreatedAt = new DateTime(2023, 6, 4, 14, 19, 42, 775, DateTimeKind.Local).AddTicks(4655),
                            Name = "Stock Market",
                            UpdatedAt = new DateTime(2023, 6, 4, 14, 19, 42, 775, DateTimeKind.Local).AddTicks(4656)
                        },
                        new
                        {
                            Id = 78,
                            CreatedAt = new DateTime(2023, 6, 4, 14, 19, 42, 775, DateTimeKind.Local).AddTicks(4657),
                            Name = "Cryptocurrency Trading",
                            UpdatedAt = new DateTime(2023, 6, 4, 14, 19, 42, 775, DateTimeKind.Local).AddTicks(4657)
                        },
                        new
                        {
                            Id = 79,
                            CreatedAt = new DateTime(2023, 6, 4, 14, 19, 42, 775, DateTimeKind.Local).AddTicks(4658),
                            Name = "Entrepreneur Stories",
                            UpdatedAt = new DateTime(2023, 6, 4, 14, 19, 42, 775, DateTimeKind.Local).AddTicks(4658)
                        },
                        new
                        {
                            Id = 80,
                            CreatedAt = new DateTime(2023, 6, 4, 14, 19, 42, 775, DateTimeKind.Local).AddTicks(4659),
                            Name = "Startups",
                            UpdatedAt = new DateTime(2023, 6, 4, 14, 19, 42, 775, DateTimeKind.Local).AddTicks(4659)
                        },
                        new
                        {
                            Id = 81,
                            CreatedAt = new DateTime(2023, 6, 4, 14, 19, 42, 775, DateTimeKind.Local).AddTicks(4660),
                            Name = "Small Business",
                            UpdatedAt = new DateTime(2023, 6, 4, 14, 19, 42, 775, DateTimeKind.Local).AddTicks(4660)
                        },
                        new
                        {
                            Id = 82,
                            CreatedAt = new DateTime(2023, 6, 4, 14, 19, 42, 775, DateTimeKind.Local).AddTicks(4661),
                            Name = "Marketing",
                            UpdatedAt = new DateTime(2023, 6, 4, 14, 19, 42, 775, DateTimeKind.Local).AddTicks(4661)
                        },
                        new
                        {
                            Id = 83,
                            CreatedAt = new DateTime(2023, 6, 4, 14, 19, 42, 775, DateTimeKind.Local).AddTicks(5427),
                            Name = "Social Media",
                            UpdatedAt = new DateTime(2023, 6, 4, 14, 19, 42, 775, DateTimeKind.Local).AddTicks(5429)
                        },
                        new
                        {
                            Id = 84,
                            CreatedAt = new DateTime(2023, 6, 4, 14, 19, 42, 775, DateTimeKind.Local).AddTicks(5431),
                            Name = "Podcasts",
                            UpdatedAt = new DateTime(2023, 6, 4, 14, 19, 42, 775, DateTimeKind.Local).AddTicks(5431)
                        },
                        new
                        {
                            Id = 85,
                            CreatedAt = new DateTime(2023, 6, 4, 14, 19, 42, 775, DateTimeKind.Local).AddTicks(5433),
                            Name = "Writing Prompts",
                            UpdatedAt = new DateTime(2023, 6, 4, 14, 19, 42, 775, DateTimeKind.Local).AddTicks(5433)
                        },
                        new
                        {
                            Id = 86,
                            CreatedAt = new DateTime(2023, 6, 4, 14, 19, 42, 775, DateTimeKind.Local).AddTicks(5500),
                            Name = "Fantasy",
                            UpdatedAt = new DateTime(2023, 6, 4, 14, 19, 42, 775, DateTimeKind.Local).AddTicks(5500)
                        },
                        new
                        {
                            Id = 87,
                            CreatedAt = new DateTime(2023, 6, 4, 14, 19, 42, 775, DateTimeKind.Local).AddTicks(5502),
                            Name = "Science Fiction",
                            UpdatedAt = new DateTime(2023, 6, 4, 14, 19, 42, 775, DateTimeKind.Local).AddTicks(5502)
                        },
                        new
                        {
                            Id = 88,
                            CreatedAt = new DateTime(2023, 6, 4, 14, 19, 42, 775, DateTimeKind.Local).AddTicks(5503),
                            Name = "Horror",
                            UpdatedAt = new DateTime(2023, 6, 4, 14, 19, 42, 775, DateTimeKind.Local).AddTicks(5503)
                        },
                        new
                        {
                            Id = 89,
                            CreatedAt = new DateTime(2023, 6, 4, 14, 19, 42, 775, DateTimeKind.Local).AddTicks(5504),
                            Name = "Thrillers",
                            UpdatedAt = new DateTime(2023, 6, 4, 14, 19, 42, 775, DateTimeKind.Local).AddTicks(5505)
                        },
                        new
                        {
                            Id = 90,
                            CreatedAt = new DateTime(2023, 6, 4, 14, 19, 42, 775, DateTimeKind.Local).AddTicks(5506),
                            Name = "True Crime",
                            UpdatedAt = new DateTime(2023, 6, 4, 14, 19, 42, 775, DateTimeKind.Local).AddTicks(5506)
                        },
                        new
                        {
                            Id = 91,
                            CreatedAt = new DateTime(2023, 6, 4, 14, 19, 42, 775, DateTimeKind.Local).AddTicks(5507),
                            Name = "Paranormal",
                            UpdatedAt = new DateTime(2023, 6, 4, 14, 19, 42, 775, DateTimeKind.Local).AddTicks(5507)
                        },
                        new
                        {
                            Id = 92,
                            CreatedAt = new DateTime(2023, 6, 4, 14, 19, 42, 775, DateTimeKind.Local).AddTicks(5508),
                            Name = "Comics",
                            UpdatedAt = new DateTime(2023, 6, 4, 14, 19, 42, 775, DateTimeKind.Local).AddTicks(5508)
                        },
                        new
                        {
                            Id = 93,
                            CreatedAt = new DateTime(2023, 6, 4, 14, 19, 42, 775, DateTimeKind.Local).AddTicks(5509),
                            Name = "Anime",
                            UpdatedAt = new DateTime(2023, 6, 4, 14, 19, 42, 775, DateTimeKind.Local).AddTicks(5509)
                        },
                        new
                        {
                            Id = 94,
                            CreatedAt = new DateTime(2023, 6, 4, 14, 19, 42, 775, DateTimeKind.Local).AddTicks(5510),
                            Name = "Manga",
                            UpdatedAt = new DateTime(2023, 6, 4, 14, 19, 42, 775, DateTimeKind.Local).AddTicks(5510)
                        },
                        new
                        {
                            Id = 95,
                            CreatedAt = new DateTime(2023, 6, 4, 14, 19, 42, 775, DateTimeKind.Local).AddTicks(5511),
                            Name = "Board Games",
                            UpdatedAt = new DateTime(2023, 6, 4, 14, 19, 42, 775, DateTimeKind.Local).AddTicks(5512)
                        },
                        new
                        {
                            Id = 96,
                            CreatedAt = new DateTime(2023, 6, 4, 14, 19, 42, 775, DateTimeKind.Local).AddTicks(5512),
                            Name = "Card Games",
                            UpdatedAt = new DateTime(2023, 6, 4, 14, 19, 42, 775, DateTimeKind.Local).AddTicks(5513)
                        },
                        new
                        {
                            Id = 97,
                            CreatedAt = new DateTime(2023, 6, 4, 14, 19, 42, 775, DateTimeKind.Local).AddTicks(5513),
                            Name = "Tabletop RPGs",
                            UpdatedAt = new DateTime(2023, 6, 4, 14, 19, 42, 775, DateTimeKind.Local).AddTicks(5514)
                        },
                        new
                        {
                            Id = 98,
                            CreatedAt = new DateTime(2023, 6, 4, 14, 19, 42, 775, DateTimeKind.Local).AddTicks(5515),
                            Name = "Travel Photography",
                            UpdatedAt = new DateTime(2023, 6, 4, 14, 19, 42, 775, DateTimeKind.Local).AddTicks(5515)
                        },
                        new
                        {
                            Id = 99,
                            CreatedAt = new DateTime(2023, 6, 4, 14, 19, 42, 775, DateTimeKind.Local).AddTicks(5516),
                            Name = "Outdoor Adventures",
                            UpdatedAt = new DateTime(2023, 6, 4, 14, 19, 42, 775, DateTimeKind.Local).AddTicks(5516)
                        },
                        new
                        {
                            Id = 100,
                            CreatedAt = new DateTime(2023, 6, 4, 14, 19, 42, 775, DateTimeKind.Local).AddTicks(5517),
                            Name = "Celebrities",
                            UpdatedAt = new DateTime(2023, 6, 4, 14, 19, 42, 775, DateTimeKind.Local).AddTicks(5517)
                        });
                });

            modelBuilder.Entity("Screamer.Domain.Entities.ChatRoom", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasAnnotation("Relational:JsonPropertyName", "createdAt");

                    b.Property<int?>("LatestMessageId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasAnnotation("Relational:JsonPropertyName", "updatedAt");

                    b.HasKey("Id");

                    b.HasIndex("LatestMessageId");

                    b.ToTable("ChatRooms");
                });

            modelBuilder.Entity("Screamer.Domain.Entities.ChatRoomUser", b =>
                {
                    b.Property<int>("ChatroomId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasAnnotation("Relational:JsonPropertyName", "createdAt");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasAnnotation("Relational:JsonPropertyName", "updatedAt");

                    b.HasKey("ChatroomId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("ChatRoomUser");
                });

            modelBuilder.Entity("Screamer.Domain.Entities.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasAnnotation("Relational:JsonPropertyName", "createdAt");

                    b.Property<int?>("ParentCommentId")
                        .HasColumnType("int");

                    b.Property<int>("PostId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasAnnotation("Relational:JsonPropertyName", "updatedAt");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ParentCommentId");

                    b.HasIndex("PostId");

                    b.HasIndex("UserId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("Screamer.Domain.Entities.CommentReaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CommentId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasAnnotation("Relational:JsonPropertyName", "createdAt");

                    b.Property<string>("ReactionType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasAnnotation("Relational:JsonPropertyName", "updatedAt");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CommentId");

                    b.HasIndex("UserId");

                    b.ToTable("CommentReactions");
                });

            modelBuilder.Entity("Screamer.Domain.Entities.Connection", b =>
                {
                    b.Property<string>("ConnectionId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("GroupName")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ConnectionId");

                    b.HasIndex("GroupName");

                    b.ToTable("Connections");
                });

            modelBuilder.Entity("Screamer.Domain.Entities.Cover", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasAnnotation("Relational:JsonPropertyName", "createdAt");

                    b.Property<bool>("IsMain")
                        .HasColumnType("bit");

                    b.Property<string>("PublicId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasAnnotation("Relational:JsonPropertyName", "updatedAt");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Cover");
                });

            modelBuilder.Entity("Screamer.Domain.Entities.Group", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Name");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("Screamer.Domain.Entities.Hashtag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasAnnotation("Relational:JsonPropertyName", "createdAt");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasAnnotation("Relational:JsonPropertyName", "updatedAt");

                    b.HasKey("Id");

                    b.ToTable("Hashtags");
                });

            modelBuilder.Entity("Screamer.Domain.Entities.Mention", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasAnnotation("Relational:JsonPropertyName", "createdAt");

                    b.Property<int>("PostId")
                        .HasColumnType("int");

                    b.Property<string>("PostTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasAnnotation("Relational:JsonPropertyName", "updatedAt");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("PostId");

                    b.HasIndex("UserId");

                    b.ToTable("Mentions");
                });

            modelBuilder.Entity("Screamer.Domain.Entities.Message", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()")
                        .HasAnnotation("Relational:JsonPropertyName", "createdAt");

                    b.Property<DateTime?>("DateRead")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("MessageSent")
                        .HasColumnType("datetime2");

                    b.Property<bool>("RecipientDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("RecipientId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RecipientUsername")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("SenderDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("SenderId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SenderUsername")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()")
                        .HasAnnotation("Relational:JsonPropertyName", "updatedAt");

                    b.HasKey("Id");

                    b.HasIndex("RecipientId");

                    b.HasIndex("SenderId");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("Screamer.Domain.Entities.Mood", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasAnnotation("Relational:JsonPropertyName", "createdAt");

                    b.Property<string>("MoodType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasAnnotation("Relational:JsonPropertyName", "updatedAt");

                    b.HasKey("Id");

                    b.ToTable("Moods");
                });

            modelBuilder.Entity("Screamer.Domain.Entities.PostCategory", b =>
                {
                    b.Property<int>("PostId")
                        .HasColumnType("int");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasAnnotation("Relational:JsonPropertyName", "createdAt");

                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasAnnotation("Relational:JsonPropertyName", "updatedAt");

                    b.HasKey("PostId", "CategoryId");

                    b.HasIndex("CategoryId");

                    b.ToTable("PostCategories");
                });

            modelBuilder.Entity("Screamer.Domain.Entities.PostHashtag", b =>
                {
                    b.Property<int>("PostId")
                        .HasColumnType("int");

                    b.Property<int>("HashtagId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasAnnotation("Relational:JsonPropertyName", "createdAt");

                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasAnnotation("Relational:JsonPropertyName", "updatedAt");

                    b.HasKey("PostId", "HashtagId");

                    b.HasIndex("HashtagId");

                    b.ToTable("PostHashtags");
                });

            modelBuilder.Entity("Screamer.Domain.Entities.PostImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasAnnotation("Relational:JsonPropertyName", "createdAt");

                    b.Property<bool>("IsMain")
                        .HasColumnType("bit");

                    b.Property<int>("PostId")
                        .HasColumnType("int");

                    b.Property<string>("PublicId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasAnnotation("Relational:JsonPropertyName", "updatedAt");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PostId");

                    b.ToTable("PostImage");
                });

            modelBuilder.Entity("Screamer.Domain.Entities.PostReaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasAnnotation("Relational:JsonPropertyName", "createdAt");

                    b.Property<int>("PostId")
                        .HasColumnType("int");

                    b.Property<string>("ReactionType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasAnnotation("Relational:JsonPropertyName", "updatedAt");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("PostId");

                    b.HasIndex("UserId");

                    b.ToTable("PostReactions");
                });

            modelBuilder.Entity("Screamer.Domain.Entities.Social", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasAnnotation("Relational:JsonPropertyName", "createdAt");

                    b.Property<string>("Discord")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Facebook")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Github")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Instagram")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Linkedin")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Medium")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Onlyfans")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Patreon")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Pinterest")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Reddit")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Signal")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Skype")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Slack")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Snapchat")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Telegram")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Tiktok")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Tumblr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Twitch")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Twitter")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasAnnotation("Relational:JsonPropertyName", "updatedAt");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Viber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Wechat")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Whatsapp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Youtube")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasFilter("[UserId] IS NOT NULL");

                    b.ToTable("Social");
                });

            modelBuilder.Entity("Screamer.Domain.Entities.Tag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasAnnotation("Relational:JsonPropertyName", "createdAt");

                    b.Property<int>("PostId")
                        .HasColumnType("int");

                    b.Property<string>("PostTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasAnnotation("Relational:JsonPropertyName", "updatedAt");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("PostId");

                    b.HasIndex("UserId");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("Screamer.Domain.Follow", b =>
                {
                    b.Property<string>("SourceUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("TargetUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasAnnotation("Relational:JsonPropertyName", "createdAt");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasAnnotation("Relational:JsonPropertyName", "updatedAt");

                    b.HasKey("SourceUserId", "TargetUserId");

                    b.HasIndex("TargetUserId");

                    b.ToTable("Follows");
                });

            modelBuilder.Entity("Screamer.Identity.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("AvatarUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Bio")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Birthday")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CoverUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("ObjectID")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "objectID");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Website")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "8e445865-a24d-4543-a6c6-9443d048cdb9",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "513126a1-4d29-4943-8f05-bf7d240d1f41",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "admin@localhost.com",
                            EmailConfirmed = true,
                            FirstName = "System",
                            LastName = "Admin",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@LOCALHOST.COM",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAIAAYagAAAAELmgc++xkDHAz7saRuVjqPYxiLOFKCGPUn+rFPR5UMWGRBF6CjrrVuMo5i5RXNXIbw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b868008a-be26-460a-89dc-15e64d029f21",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserName = "admin"
                        },
                        new
                        {
                            Id = "9e224968-33e4-4652-b7b7-8574d048cdb9",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "db993a6e-06ea-4f3b-a721-7437c05232a4",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user@localhost.com",
                            EmailConfirmed = true,
                            FirstName = "System",
                            LastName = "User",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER@LOCALHOST.COM",
                            NormalizedUserName = "USER",
                            PasswordHash = "AQAAAAIAAYagAAAAEM67tfVnRU2E4sPh/xL5w+H1y50GUMeuZ81yrGgxmX5PANbvdIJkqExT+d8+YKdElQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "223ff0b9-d538-4d6b-ad8e-c8853cddf2f4",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserName = "user"
                        },
                        new
                        {
                            Id = "9e224968-33e4-4652-b7b7-agfddsr",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ca610314-eb99-45c3-a40f-1fc4fddbaae4",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "mod@localhost.com",
                            EmailConfirmed = true,
                            FirstName = "System",
                            LastName = "Mod",
                            LockoutEnabled = false,
                            NormalizedEmail = "MOD@LOCALHOST.COM",
                            NormalizedUserName = "MOD",
                            PasswordHash = "AQAAAAIAAYagAAAAEGu3mougPiC2ssGkZQx/CKBwVldCmHXDRwa9N8O54nvPpbTY5T9O0rlVRtNByYmHcQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "fc3f215c-97fd-428d-8871-01d3ebf21c47",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserName = "mod"
                        },
                        new
                        {
                            Id = "9e224968-33e4-4652-b7b7-ismailbentabett",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "73361dca-8597-4061-afe7-d2d2707ca225",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "ismailbentabett@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Ismail",
                            LastName = "Bentabet",
                            LockoutEnabled = false,
                            NormalizedEmail = "ISMAILBENTABETT@GMAIL.COM",
                            NormalizedUserName = "ISMAILBENTABETT",
                            PasswordHash = "AQAAAAIAAYagAAAAELXjxMchxI8mjViIhIkMYXDgSvSxcjN1XdWA/d69chsW7FqUWlDs7uZVIg9NhEFrWg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e422304c-01fe-41e1-aedc-0c6567859a33",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserName = "ismailbentabett"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Screamer.Identity.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Screamer.Identity.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Screamer.Identity.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Screamer.Identity.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Screamer.Domain.Common.Avatar", b =>
                {
                    b.HasOne("Screamer.Identity.Models.ApplicationUser", "User")
                        .WithMany("Avatars")
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Screamer.Domain.Common.Post", b =>
                {
                    b.HasOne("Screamer.Domain.Entities.Mood", "Mood")
                        .WithMany("Posts")
                        .HasForeignKey("MoodId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Screamer.Identity.Models.ApplicationUser", "User")
                        .WithMany("Posts")
                        .HasForeignKey("UserId");

                    b.Navigation("Mood");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Screamer.Domain.Entities.Adress", b =>
                {
                    b.HasOne("Screamer.Identity.Models.ApplicationUser", "User")
                        .WithOne("Adress")
                        .HasForeignKey("Screamer.Domain.Entities.Adress", "UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Screamer.Domain.Entities.ChatRoom", b =>
                {
                    b.HasOne("Screamer.Domain.Entities.Message", "LatestMessage")
                        .WithMany()
                        .HasForeignKey("LatestMessageId");

                    b.Navigation("LatestMessage");
                });

            modelBuilder.Entity("Screamer.Domain.Entities.ChatRoomUser", b =>
                {
                    b.HasOne("Screamer.Domain.Entities.ChatRoom", "ChatRoom")
                        .WithMany("ChatRoomUsers")
                        .HasForeignKey("ChatroomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Screamer.Identity.Models.ApplicationUser", "User")
                        .WithMany("ChatRoomUsers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ChatRoom");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Screamer.Domain.Entities.Comment", b =>
                {
                    b.HasOne("Screamer.Domain.Entities.Comment", "ParentComment")
                        .WithMany("Replies")
                        .HasForeignKey("ParentCommentId");

                    b.HasOne("Screamer.Domain.Common.Post", "Post")
                        .WithMany("Comments")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Screamer.Identity.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("ParentComment");

                    b.Navigation("Post");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Screamer.Domain.Entities.CommentReaction", b =>
                {
                    b.HasOne("Screamer.Domain.Entities.Comment", "Comment")
                        .WithMany("Reactions")
                        .HasForeignKey("CommentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Screamer.Identity.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Comment");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Screamer.Domain.Entities.Connection", b =>
                {
                    b.HasOne("Screamer.Domain.Entities.Group", null)
                        .WithMany("Connections")
                        .HasForeignKey("GroupName");
                });

            modelBuilder.Entity("Screamer.Domain.Entities.Cover", b =>
                {
                    b.HasOne("Screamer.Identity.Models.ApplicationUser", "User")
                        .WithMany("Covers")
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Screamer.Domain.Entities.Mention", b =>
                {
                    b.HasOne("Screamer.Domain.Common.Post", "Post")
                        .WithMany("Mentions")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Screamer.Identity.Models.ApplicationUser", "User")
                        .WithMany("Mentions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Post");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Screamer.Domain.Entities.Message", b =>
                {
                    b.HasOne("Screamer.Identity.Models.ApplicationUser", "Recipient")
                        .WithMany("MessagesReceived")
                        .HasForeignKey("RecipientId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Screamer.Identity.Models.ApplicationUser", "Sender")
                        .WithMany("MessagesSent")
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Recipient");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("Screamer.Domain.Entities.PostCategory", b =>
                {
                    b.HasOne("Screamer.Domain.Entities.Category", "Category")
                        .WithMany("PostCategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Screamer.Domain.Common.Post", "Post")
                        .WithMany("PostCategories")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Post");
                });

            modelBuilder.Entity("Screamer.Domain.Entities.PostHashtag", b =>
                {
                    b.HasOne("Screamer.Domain.Entities.Hashtag", "Hashtag")
                        .WithMany("PostHashtags")
                        .HasForeignKey("HashtagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Screamer.Domain.Common.Post", "Post")
                        .WithMany("PostHashtags")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Hashtag");

                    b.Navigation("Post");
                });

            modelBuilder.Entity("Screamer.Domain.Entities.PostImage", b =>
                {
                    b.HasOne("Screamer.Domain.Common.Post", "Post")
                        .WithMany("PostImages")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Post");
                });

            modelBuilder.Entity("Screamer.Domain.Entities.PostReaction", b =>
                {
                    b.HasOne("Screamer.Domain.Common.Post", "Post")
                        .WithMany("Reactions")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Screamer.Identity.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Post");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Screamer.Domain.Entities.Social", b =>
                {
                    b.HasOne("Screamer.Identity.Models.ApplicationUser", "User")
                        .WithOne("Socials")
                        .HasForeignKey("Screamer.Domain.Entities.Social", "UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Screamer.Domain.Entities.Tag", b =>
                {
                    b.HasOne("Screamer.Domain.Common.Post", "Post")
                        .WithMany("Tags")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Screamer.Identity.Models.ApplicationUser", "User")
                        .WithMany("Tags")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Post");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Screamer.Domain.Follow", b =>
                {
                    b.HasOne("Screamer.Identity.Models.ApplicationUser", "SourceUser")
                        .WithMany("Following")
                        .HasForeignKey("SourceUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Screamer.Identity.Models.ApplicationUser", "TargetUser")
                        .WithMany("Followers")
                        .HasForeignKey("TargetUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("SourceUser");

                    b.Navigation("TargetUser");
                });

            modelBuilder.Entity("Screamer.Domain.Common.Post", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Mentions");

                    b.Navigation("PostCategories");

                    b.Navigation("PostHashtags");

                    b.Navigation("PostImages");

                    b.Navigation("Reactions");

                    b.Navigation("Tags");
                });

            modelBuilder.Entity("Screamer.Domain.Entities.Category", b =>
                {
                    b.Navigation("PostCategories");
                });

            modelBuilder.Entity("Screamer.Domain.Entities.ChatRoom", b =>
                {
                    b.Navigation("ChatRoomUsers");
                });

            modelBuilder.Entity("Screamer.Domain.Entities.Comment", b =>
                {
                    b.Navigation("Reactions");

                    b.Navigation("Replies");
                });

            modelBuilder.Entity("Screamer.Domain.Entities.Group", b =>
                {
                    b.Navigation("Connections");
                });

            modelBuilder.Entity("Screamer.Domain.Entities.Hashtag", b =>
                {
                    b.Navigation("PostHashtags");
                });

            modelBuilder.Entity("Screamer.Domain.Entities.Mood", b =>
                {
                    b.Navigation("Posts");
                });

            modelBuilder.Entity("Screamer.Identity.Models.ApplicationUser", b =>
                {
                    b.Navigation("Adress");

                    b.Navigation("Avatars");

                    b.Navigation("ChatRoomUsers");

                    b.Navigation("Covers");

                    b.Navigation("Followers");

                    b.Navigation("Following");

                    b.Navigation("Mentions");

                    b.Navigation("MessagesReceived");

                    b.Navigation("MessagesSent");

                    b.Navigation("Posts");

                    b.Navigation("Socials");

                    b.Navigation("Tags");
                });
#pragma warning restore 612, 618
        }
    }
}
